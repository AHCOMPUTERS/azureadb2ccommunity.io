var store = [{
        "title": "What is Azure AD B2C?",
        "excerpt":"          Top usecases           ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/what-is-azuread-b2c/",
        "teaser": null
      },{
        "title": "Authentication fundamentals?",
        "excerpt":"Authentication fundamentals  Basics            Web Applications            Web single sign-on            Federation            Part 1: Native client applications            Part 2: Native client applications            Protocols   OpenID Connect   OAuth2   SAML  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/identity-fundamentals/",
        "teaser": null
      },{
        "title": "Azure AD B2C policy",
        "excerpt":"Concept   For consumer-based applications, there is a notion of sign-up, sign-in, profile management and even password reset. Azure AD B2C makes this easy across all platforms, web, mobile and desktop apps. Your customers have the flexibility to choose their identity:      Social accounts such as Facebook, Microsoft, Google, Amazon or any other social identify provider.   Enterprise accounts such as ADFS or Salesforce.   Local account where the account is stored and manage by Azure AD B2C.   A policy, whether it’s a built-in policy or a custom policy, holds the same underlying concepts. Configuring a set of steps and user experiences to take the user through a journey to retrieve claims that are ultimately presented to the relying party application.   Sign-up or sign-in is a common consumer enrollment experience.  These types of experiences are controlled by different policies.   Examples   Our first policy example is “Sign-up or sign-in”. Using a sign-up or sign-in policy, users can: sign-in with a local account. Or sign-in with any external account, such as Facebook or ADFS. Create new local account. Or reset their password. All those actions are configured in the policy.      Maintaining a user’s information is important.  Utilizing the “Edit profile” policy will allow your users to maintain their information after successfully signing in with a social, local or external account.      Configuration            ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/azuread-b2c-policies/",
        "teaser": null
      },{
        "title": "Basic policies",
        "excerpt":"Your application, regardless if it is a web, mobile, desktop or single page application, initiates an authentication request referencing a policy id, such that a specific policy can be executed. The policy controls what the experience will be for this scenario.  The policy generates a token at the end of its execution, and it will be sent to your application to be consumed. This flow applies to any Azure AD B2C policy.   The steps inside a policy can vary from policy to policy. It is truly based on set of steps you specify.     ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/app-integration/",
        "teaser": null
      },{
        "title": "UI customization",
        "excerpt":"HTML Templates  You can customize the look and feel of any Self-Asserted technical profile. To customize the user interface:      Create an HTML page with your own branding. This page can be a static one *.html, or a dynamic HTML page (e.g .NET, Node.js, PHP) which will serve the content. The HTML template can contain any HTML elements (except insecure elements, such as iframes) CSS styling, and JavaScript. The only required element is a div element with id set to ‘api’, such as this one &lt;div id=\"api\"&gt;&lt;/div&gt; within your HTML page.   Publish the HTML page to an anonymous web server, and set the CORS to allow the Azure AD B2C domain to request your content.   In the policy you point to the HTML template you published.   During run time, Azure AD B2C will loads your HTML template and merge the Azure AD B2C user interface elements into the &lt;div id=\"api\"&gt;&lt;/div&gt; element located in the custom HTML content.      Localization  Localization allows you to support multiple locales or languages in the policy for the user journeys. The localization support in policies allows you to:     Set up the explicit list of the supported languages in a policy and pick a default language.   Provide language-specific strings and collection      ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/Customization/",
        "teaser": null
      },{
        "title": "Concepts",
        "excerpt":"Introduction   In this training we will be taking a closer look at what Azure AD B2C custom policies are. Many times when “custom policies” are mentioned, we are referring to the underlying policy within Identity Experience Framework (IEF). The following will describe what an Azure AD B2C policy is comprised of and how a user experience is generated.   With Azure AD B2C custom policies, you are not limited to the sign-up or sign-in, password reset and edit profile policies/journeys. You can create any policy you would like. Such as:      Link and unlink a social account to local or vice versa.   Allow a user to change their sign-in email address, or MFA phone number.   Invite a user to Azure AD B2C.   ROPC based flows - A non-interactive flow, commonly used with mobile applications.   Magic link - Where users can redeem an account with a link you send them, or launch any custom user journey.   Sign in and migrate accounts - Allows you to migrate user accounts from any legacy identity provider to Azure AD B2C just in time.   Identity and claims exchange   Azure AD B2C is backed by a global, highly available, and secure cloud identity service and directory service. During policy execution, such as sign-up or sign-in, Azure AD B2C policy exchanges claims with a variety of systems, both having the ability to send and receive claims in either direction.   Sign-in with local account flow  This diagram depicts the Sign-in with local account flow using a “sign-up or sign-in” policy.              The user starts their journey by opening their application and clicking on sign-in button. The user is redirected to Azure AD B2C to complete the sign-up or sign-in flow.            In this example, the user chooses to sign-in with a local account (an account that is fully managed by Azure AD B2C).  The user provides their email and password. Internally, the email address is cross referenced against the signInNames user attribute.            The user clicks “Sign In”. Azure AD B2C validates the credentials provided by the user. If the user provided the correct credentials, Azure AD B2C reads various user object properties from the directory, such as display name, first name, last name and more.            Azure AD B2C finally redirects the user back to the application with a token that was issued.       At a high level, this outlines the flow of a local account sign-in journey. In these steps, Azure AD B2C exchanges claims with other systems.   First step, the application sends information to execute the authorization request, such as the Azure AD B2C policy Id.   Second step, the user provided their credentials, this translates to the “username” and “password” claims being provided by the user. This is a claims exchange, and this claims exchange is called “self-asserted”.   Third step, Azure AD B2C reads the user object from the directory. Sending the username claim and getting back the requested claims about the user.   Fourth step, Azure AD B2C builds the id token and sends it back to the application.   Sign-in with social account flow  In a more complex scenario, when a user chooses to sign-in with a Facebook account. The user is taken to the Facebook sign-in page. After the user completes their login to Facebook a token is returned to Azure AD B2C. Azure AD B2C validates the Facebook token and reads the claims. Then reads the social account profile from the directory.   But, in this case Azure AD B2C also invokes a REST API, to further integrate with a marketing database, sending and receiving claims from the REST API.   In the final step B2C issues an id token back to the application.      Claims Exchange   Let’s take a closer look at following diagram which illustrates how Azure AD B2C exchanges claims with other systems.   The relying party application, also known as your Application, sends an authentication request to B2C. B2C may send or receive claims from the end-user, social identity provider, multi-factor authentication provider, REST API and with the Directory service (Azure AD).      During the policy execution, Azure AD B2C stores the claims in a temporary memory called a “claims bag”. This is stored in real-time to be utilized for any further steps in the policy.   Claims Definitions  A claim provides temporary storage of data during an Azure AD B2C policy execution. It can store information about the user, such as first name, last name, or any other claim obtained from the user or other systems (claims exchanges).   When the policy runs, Azure AD B2C sends and receives claims to and from internal and external parties and then sends a sub-set of these claims to your relying party application as part of the token. Claims are used in these ways:     A claim is saved, read, or updated against the directory user object.   A claim is received from an external identity provider.   Claims are sent or received using a custom REST API service.   Data is collected as claims from the user during the sign-up or edit profile flows.   A claim should have at least following      Id - an identifier that’s used for the claim type. Other elements can use this identifier in the policy.   Display name - The title that’s displayed to users on various screens. The value can be localized.   Data type - The type of the claim. Data types such as Boolean, date, date and time, int, long, string, string collection, and more.   If a claim is used as part of a page a user can interact with (self-asserted claims exchange), the claim may contain more information, such as:     User input type - The type of input control that should be available to the user when manually entering the claim data for the claim type, for example “text box”. See the user input types defined later on this page.   Mask - An optional string of masking characters that can be applied when displaying the claim. For example, the phone number 324-232-4343 can be masked as XXX-XXX-4343.   User help text - a description of the claim type that can be helpful for users to understand its purpose. The value can be localized.   Restriction - The input validations for this claim, such as a regular expression (Regex) or a list of acceptable values. The value can be localized.   Predicate validation reference - A reference to a predicate validations input element, that allows you to perform a validation process to ensure that only properly formed data is entered. For more information, see Predicates.   Claims mapping and default value  When Azure AD B2C exchanges claims, the name of the claim used by the partner may differ from the one configured in your policy. For example, Azure AD B2C refers to the first name with givenName while Facebook uses first_name. Azure AD B2C supports mapping your partner claim name to the one configured in your Azure AD B2C policy.   In the table below, we can see how various entities give different claim names to the same property.                  B2C internal name       Facebook       Google       Twitter                       issuerUserId       id       id       user_id                 givenName       first_name       given_name       NA                 surname       last_name       family_name       NA                 displayName       name       name       screen_name                 email       -       -       -           You can use claims mappings to change the name of the claim while sending and receiving data from any claims exchange component. This allows you to be able to interface your Azure AD B2C claim IDs with those of external systems.   You may want to set a default value to a claim, if the partner doesn’t return the claim, or to override the value regardless of the returned value, or to handle null return values.  An example of this is setting the claim called identityProvider to facebook.com and the authenticationSource to socialIdpAuthentication. Subsequent steps in the policy can then use these claims to check whether user sign-in with a local account, or social and take a conditional based action.     Claims transformations  Claims transformations are predefined functions. When exchanging claims with a partner, you may need to convert a given claim to another one or determine whether one claim is equal to another. Azure AD B2C has a predefined set of claims transforms which allows manipulating the claims inside the claims bag.   Here are some examples of claims transformations:     Change a string case to upper or lower case   Set a predefined value to a claim   Compare two claims and return a boolean result   Create a random string   Format a string by the way of concatenation   Add a claim to a string collection   Get current data and time   Null a claim   Check if a claim has value and return a boolean result      Technical profile   The following will dive into the underlying components of Azure AD B2C, these components are referred to as Technical Profiles which drive the functionality of your Azure AD B2C policy. All interactions with partners to perform claims exchanges are completed via technical profiles.      You can think of Technical Profiles like functions. They can:     Send claims to the partner - “input claims”   Execute a procedure - E.g. Render a page to collect information from the user   Return claims to Azure AD B2C – “output claims”   Technical profiles provide a framework with a built-in mechanism to communicate with known Azure AD B2C components, REST APIs and Identity Providers via open standard protocols.    There are various types of technical profile:     Identity Provider - Denoted by the Protocol of the Identity Provider (OAuth1, OAuth2, OpenID Connect, SAML and Ws-Fed)   REST API - Allows interfacing with an external API   Self-Asserted - Allows presenting a page to the user   Azure MFA - Allows presenting the Azure MFA screen to a user.   Azure Active Directory - Allows Read/Write operations against the directory   Application Insights - Allows sending custom events to an App Insights instance.   Token Issuer - Allows issuing a token after authentication completes.   All types of technical profiles share the same concept as per the following diagram.                Input claims transformation - Before a claim is provided to this Technical Profile, the claim can be manipulated via a claims transform. For example, concatenate two claims and provide it as an input claim to this technical profile.            Input claims - Claims that are provided as inputs to the type of Technical Profile being executed. Since each type of Technical Profile provides its own built in functionality, these input claims can act differently.             Self Asserted - Pre-populate fields that are displayed on the screen.       REST API - Act as claims to be sent as a JSON key value pair to the API endpoint.       Identity Provider (OpenId) - Additional query parameters as part of the authentication request.       Azure MFA - Pre-populate the phone number for an prior enrolled user.       Azure Active Directory - To lookup the user in the directory.                Technical profile execution - As each Technical Profile has a type, the execution is dependant on that.            Self Asserted - Display a page for the user to interact with. The user can provide information, or edit information about their profile.       REST API - Ability to call a REST API endpoint to exchange claims.       Identity Provider - Ability to redirect the user to an external Identity Provider.       Azure MFA - Provides the user a page to perform Azure MFA.       Azure Active Directory - Allows Azure AD B2C policy to read or write to the directory.                     Validation technical profile - When a user provides data via a Self-Asserted technical profile, this information may need to be validated. A common example is to have the user provide a loyalty number, which is then validated at an external system to determine if it is valid.       A Self-Asserted technical profile can therefore call another Technical Profile, or multiple consecutively, which provide the means to validate the information.       This will either allow the user to continue or prevent any further execution if an error is thrown. In the case where the user can continue, the validation technical profile can output claims and add them to the claims bag for any subsequent validation technical profiles to run as part of the this Self-Asserted technical profile.       Claims that a Validation technical profile shared (output) with the Self-Asserted technical profile are not automatically available for subsequent steps in the Azure AD B2C policy to use, unless those claims are output within the Self-Asserted technical profile itself.       In the example of validating a loyalty number, the Validation technical profile can reference a REST API technical profile to have the loyalty number validated at an external system.            Output claims - Claims to return back to the claims bag. Depending on the technical profile type, the output claims behave differently, however all types of Technical Profile will return the output claim into the claims bag.            Self Asserted - Will display the fields to the user, unless satisfied by a Validation technical profile.       REST API - The expected JSON key value pairs from the APIs response.       Identity Provider - The expected JSON key value pairs from the JWT received.       Azure MFA - The ability to confirm the SMS/Phone Number completed MFA.       Azure Active Directory - Issues claims after reading or writing to a user into the claims bag.           You can use these claims as input claims into subsequent orchestration steps, create conditional logic around the journey execution, or manipulate them via output claims transformations as part of this technical profile.            Output claims transformations - A technical profile may contain a list of output claims transformations to be executed to manipulate the claims before sending them to the claims bag.       As an example, take the first name and last name and use an output claims transformation to concatenate these values into a new single claim value. Subsequent steps will then be able to have access to the concatenated string.            Session management - A technical profile can contain a reference to a session management technical profile that is responsible to manage whether the user will skip a step in the policy when experiencing single sign on.   Validation technical profile  As mentioned above, a Self-Asserted technical profile may define one or more validation technical profiles to be used for validating some or all of its output claims.   A validation technical profile is an ordinary technical profile from any type(protocol), such as Azure Active Directory or a REST API. The Validation technical profile returns output claims or returns an HTTP error message.    The most common use of a Validation technical profile is to validate the username and password the user provides during Sign-In.      Another example during Sign-up, before allowing a user to create their account, Azure AD B2C must check if the account already exists.   Therefore, once the user enters their information through a Self-Asserted technical profile, it must validate the email does not already exist in the directory.   To achieve this, the Self-Asserted technical profile calls a Validation Technical profile which searches the directory for the users email. An Azure Active Directory technical profile type is used, which is configured to throw an error if the user exists, or otherwise continue silently.   You can further augment this process to call another Validation technical profile of type REST API. This could validate any other information the user provided during sign up, for example their ID Number.     Integration with line of business applications  You can use REST API technical profile to:     Validate user input data - This action prevents invalid data from being persisted into Azure AD B2C claims bag. If the value from the user is not valid, your RESTful service should return an error message that instructs the user to provide a valid entry. For example, you can verify that the email address provided by the user exists in your CRM platform.   Overwrite input claims  - For example, if a user enters the first name in all lowercase or all uppercase letters, you can format the name with only the first letter capitalized.   Enrich user data by further integrating with corporate line-of-business services - Your RESTful service can receive the user’s email address, query the CRM platform, and return the user’s loyalty number to Azure AD B2C. The return claims can be stored in the user’s Azure AD account, evaluated in the next Orchestration Steps, included in the id token or a combination.   Run custom business logic - You can send push notifications, update corporate databases, run a user migration process, manage permissions, audit databases, and perform other actions.      User Journey   A user journey defines the overall user experience that a Azure AD B2C policy will provide when the Identity Experience Framework processes the authentication request. The user is taken through a series of steps to retrieve the claims that are to be presented to the relying party.   Each user journey is a consecutive sequence of orchestration steps. Each step has a defined type that specifies the overall type of step to be executed, and a reference to the technical profile which fulfills that execution.   For example the type “IdP selection” -  This lets the user select with whom they would like to login with from a list of identity providers (sign-in with local account, Facebook, Microsoft account, Twitter, Google, ect.).   If a user selects to sign-in with a local account, there is an orchestration step in which specifies the technical profile that collects and validates the user credentials and returns the user object Id to the claims bag.   If a user selects to sign-in with a social account, the next orchestration step takes the user to the selected identity provider, such as Facebook.   In the majority of cases, the last orchestration step type issues the token and redirects the user back to the application.   In the following example, we have 7 steps. But a user may not run through all of them. Because a step may contain preconditions instructing the policy to skip to the next orchestration step, based on claim comparison or claim existence. This is very similar to an If and Else statement.      Local and social accounts user journey  The sign-up or sign-in user journey contains the following orchestration steps:           Initiates an identity provider selection: Shows the identity provider options to user. If user provides credentials on this screen, then they have chosen to login with a local account. If the user clicks on one of the social identity providers, B2C will move directly to the next step to handle this.       ![Sign-up or sign-in]/assets/images/docs/uj-local-and-social-account-susi.png)            If user had signed-in locally (in the previous orchestration step/s), skip this step, since in this step we want to handle external account logins. In this step sign in with the social provider selected earlier by executing its respective technical profile, or register new user with a local account.                   If local account had been chosen earlier (user had signed-in or signed-up with a local account), skip this step, otherwise lookup the social account by the social account unique id obtained from the social identity provider and read its attributes from the Azure AD B2C directory.       In this step, B2C attempts to find a representation of the social account in the directory. If the account is not found, B2C will not raise an error message, since this means the user has signed-in with Facebook for the first time.            If a social account representation of a user was found skip this step. Otherwise since this user logging in for the first time with their social account, present the user a registration form. Once the user submits this page create the account in the directory. The Self-Asserted technical profile invokes a validation technical profile that actually writes the account into the directory.                   If this is a social account login, skip this step, else read all desired attributes from the user signed in with a local account from the user directory.            Create a token with the claims of the user collected during the user journey to send back to app within the id token.       Preconditions  Preconditions can be used similar to an if/else statement. They can be used to conditionally execute an orchestration step (technical profile), or validation technical profile.   The following is an example which applies a precondition to an orchestration step within the user journey. This orchestration step will execute a technical profile, therefore the precondition governs whether the technical profile will or will not be run.   &lt;OrchestrationStep Order=\"5\" Type=\"ClaimsExchange\"&gt;     &lt;Preconditions&gt;         &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;             &lt;Value&gt;objectId&lt;/Value&gt;             &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;         &lt;/Precondition&gt;     &lt;/Preconditions&gt;     &lt;ClaimsExchanges&gt;         &lt;ClaimsExchange Id=\"AADUserWrite\" TechnicalProfileReferenceId=\"AAD-UserWriteUsingAlternativeSecurityId\" /&gt;     &lt;/ClaimsExchanges&gt;   Breaking this down:     This states that this precondition will execute the desired action if the claim exists in the Azure AD B2C claim bag.   &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;      This states that the claim which is being evaluated to being within the claim bag is called objectId.   &lt;Value&gt;objectId&lt;/Value&gt;      This is the action which will be executed once the condition is met.   &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;   If the condition is not met, then the orchestration step is not skipped, and the technical profile is executed.   A precondition can also base its result on the value of a claim.       &lt;Precondition Type=\"ClaimEquals\" ExecuteActionsIf=\"true\"&gt;         &lt;Value&gt;name&lt;/Value&gt;         &lt;Value&gt;John Smith&lt;/Value&gt;         &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   For preconditions based Boolean claims, the Value must be True or False, this is case sensitive.   For more information on configuring a precondition, see this reference for preconditions to control the execution of orchestration steps, and this reference to control the execution of validation technical profiles.   Policy structure   Custom policies are XML configuration files that define the behavior and user experience of an Azure AD B2C policy, with the use of:     Claim definitions   Claims transformations   Technical profiles   User journey/s   Replying Party   While built-in policies (also referred to as User Flows) are predefined in the Azure AD B2C portal for the most common authentication journeys, custom policies can be fully edited by an identity developer to complete many different tasks wrapped in an authentication journey.   Policy execution  Your relying party application calls a relying party policy. The relying party policy specifies which user journey to execute.   A user journey defines the business logic of what a user will experience. Each user journey is a set of orchestration steps that performs a series of claims exchanges with various partners, in a consecutive order adding to the claims bag as each step completes.   Each orchestration step calls a Technical Profile. Technical profiles provide a framework with a built-in mechanism to communicate with known Azure AD B2C components, REST APIs and Identity Providers via open standard protocols.   An orchestration step may have one or more preconditions to determine if the orchestration step should execute during this flow or skipped.      Policy file structure   An Azure AD B2C policy follows an inheritance model, whereby configurations being made in a chained file can take dependencies on configuration elements defined earlier in the chain of files. This allows you to scale your design without impacting other work that you have created and add additional policies to leverage existing work.   Let’s look at a relying party application (at the bottom of the diagram). It calls the Relying Party policy file to execute a specific task to initiate the sign-in flow.   The Identity Experience Framework in Azure AD B2C stacks all of the elements from the Base file, completing the chain of files to the Relying Party policy file to assemble the current policy in effect. Elements of the same type and name in further in the chain of files override those elements those already configured in file earlier in the chain.   As described in the diagram, your application will always reference the relying party policy id as part of the authentication request.   The child policy at any level can inherit from the parent policy and extend it by adding new elements or overriding some or all of the elements in the parent policies.   There is no limit on the number of levels in this chained structure.         A relying party application, such as a web, mobile, or desktop application, calls the relying party (RP) policy.   The RP policy configures the list of claims the relying party application receives as part of the token that is issued.   Multiple applications can use the same policy. All applications will receive the same token and claims in this case.   A single application can use multiple policies and each application could receive different claims in the returned token.   A relying party policy, points to the user journey to be executed   A tenant can have multiple polices (built-in and custom). You can combine a built-in policy with custom policies. For example the sign-in journey can be a custom policy, whilst the profile edit journey can be a built-in policy.   Relying party policy endpoints  For each relying party policy created, Azure AD B2C provides you  the endpoints that your application may use:     Well-known configuration – which provide the metadata for Azure AD B2C.            https://tenant-name.b2clogin.com/tenant-name.onmicrosoft.com/policy-id/oauth2/v2.0/.well-known/openid-configuration           Authorize endpoint to make authentication requests            https://tenant-name.b2clogin.com/tenant-name.onmicrosoft.com/policy-id/oauth2/v2.0/authorize           Token endpoint to redeem authorization codes for access tokens            https://tenant-name.b2clogin.com/tenant-name.onmicrosoft.com/policy-id/oauth2/v2.0/token           Logout to logout the user from Azure AD B2C.            https://tenant-name.b2clogin.com/tenant-name.onmicrosoft.com/policy-id/oauth2/v2.0/logout             Customize your policy   Content definitions  A content definition allows linking a page type referenced in a Self-Asserted technical profile and the HTML template, localization and page contract (see later).      The self-asserted technical profile points to a content definition identifier. The content definition contains:     The URL of the HTML template   Pointer to the localizations   Defines the page contract   Note: You can add the localization to the content definition OR directly to the self-asserted technical profile   ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/custom-policy-concepts/",
        "teaser": null
      },{
        "title": "XML elements",
        "excerpt":"Using a hierarchical chain, a custom policy is broken into one or more XML-formatted files.           These files are comprised of several components such as, the claims schema, technical profiles, and much more.            Each policy file is defined within the root-level TrustFrameworkPolicy element.       Trust framework policy  The TrustFrameworkPolicy element specifies the unique identifier to the tenant name to which the policy belongs. And the policy name. A custom policy should start with B2C_1A_. This is important as you will want granular control on different user journeys.      Base policy element  To chain files together and build the inherited file structure, a BasePolicy element must be declared under the TrustFrameworkPolicy element of the policy file. The BasePolicy element is a reference to the base policy from which this policy is derived.       Building blocks  Within the Trust Framework Policy, we have a set of elements that that helps manage the data received and sent from different connections. These set of elements are called the Building Blocks.      The BuildingBlocks element contains the following. Note, the order of elements must follow this order when defined:     Claims schema - Contains the list of claims used by your policy.   Predicates and Predicate validations - Enables you to perform a validation process to ensure that only properly formed data is entered into a claim.   Claims transformations - A list of claims transformations that can be used in your policy. A claims transformation manipulates one claim into another.   Content definitions - Contains URLs for HTML5 templates to use in your user journey for custom page layouts, and a reference to localized resources.   Localization - Provides multiple language support when rendering pages to your users.   Claims schema  Claims schema is the place where you declare your claims. A claim can be first name, last name, display name, phone number and more. The ClaimsSchema element contains a list of ClaimType elements. The ClaimType element contains:     Id attribute (claim name)   Display name - The title that’s displayed to users on various screens. The value can be localized   Data type - The type of the claim. The data types of boolean, date, dateTime, int, long, string, stringCollection and more.   User help text - A description of the claim type that can be helpful for users to understand its purpose. The value can be localized.   User input type - The type of input control that should be available to the user when entering the claim data for the claim type.      Claims Transformations  A claims transformation converts a given claim into another one In the claims transformation, specify the transform method. For example, specify a transform method that adds an item to a string collection or changes the case of a string. A claims transformation contains:     Id an arbitrary name you define to reference this claim transformation within a Technical Profile.   The transform method to apply.   A list of InputClaim elements that specify claim types that are taken as input to the claims transformation.   A list of InputParameter elements that are provided as input to the claims transformation.   A list of OutputClaim elements that specify claim types that are produced after the ClaimsTransformation has been invoked.     The following claims transformation creates a userPrincipleName, by using the string format method – here is an example of a claim transformation policy called “CreateUserPrincipalName”.      Content definitions  Azure AD B2C can provides a content definition interface that allows customizing the look and feel of any self-asserted technical profile. This is important as it applies loading certain UI elements based on versioning and page identifiers.      Claims Providers   TechnicalProfile elements are organized under the ClaimsProvider element. In the following example, the first being a Facebook claims provider with a single technical profile. The others following, are Azure AD claims providers, including multiple technical providers. A claims provider element can help organize technical profiles. It is possible to have all technical providers within a single claims provider element, or to have each technical profile within its own claims provider element. The claims provider element offers the ability to group and organize technical profiles that are related to each other.      Technical profiles  All technical profiles can contain the same set of XML elements, share the same concept and execute in the same way. But the goal of the XML element may change from one technical profile to another. For example, an OAuth2 technical profile, has a different set of metadata than an Azure AD technical profile. The input claims for a self-asserted technical profile pre-populate the data on the page, while in a REST API, B2C sends input claims to the REST Service in a JSON payload.   The SelfAsserted-LocalAccountSignin-Email technical profile renders the combined local account sign-in sign-up page.   The technical profile collects the sign-in name (email address) and the password from the user. When user clicks on sign-in, the login-NonInteractive validation technical profile validates the credentials, and returns the user object properties from the directory. If the account was not found or a bad password was entered, the validation technical profile raises an error message.   You cannot collect more data from the user in the combined sign-up or sign-in page. You can localize the elements of the screen and error messages using content definition localization.      This technical profile has:     Id – The technical profile name. The sign-up or sign-in user journey calls this technical profile by its Id.   Protocol - Proprietary, this is an Azure AD B2C internal protocol that allows interaction with a user object in the directory.   Metadata – Contains the content definition to load.   Input claims – Such that Azure AD B2C can pre-populate the username.   Output claims - Claims (data) to be provided by the end user. This technical profile has four output claims. Only signInName and password are presented to the user. Whilst the objectId and the authenticationSource are returned by the validation technical profile and therefore Azure AD B2C will not display these to the user on the rendered page.   Validation technical profile - Azure AD B2C executes the login-NonInteractive technical profile to validate the user credentials when the user submits the page, and returns the user object properties. Most importantly the users objectId.   Similar to the SelfAsserted-LocalAccountSignin-Email, the Facebook-OAUTH technical profile contains similar elements.         Protocol - OAuth2, Azure AD B2C will communicate with Facebook over OAuth2.   Metadata - Relevant configuration options to the OAuth2 protocol, such as the Facebook authorization endpoint.   Cryptography Key – Used when Azure AD B2C redeems the authorization code for an access token using the client secret stored in the specified cryptography key reference.   Input claims - None, we do not send anything to Facebook except an authentication request.   Output claims - Claims parsed from the JWT issued by Facebook and added to the Azure AD B2C claims bag. Some of the claims have a mapping, to map between the Azure AD B2C claim name and the claim name used by Facebook. Identity provider and authenticationSource claims aren’t returned by Facebook. But rather explicitly set using a default value such that they can be used as part of preconditions in subsequent orchestrations steps.   As part of the starter pack, the Facebook technical profile is declared in the Base policy, but has an override in the Extension policy. This is such that we follow the recommendation to keep the Base file static, and make changes in subsequent files in the file structure. The per environment configuration for Facebook is therefore done in the Extension policy.      User Journeys   Orchestration step   The first two orchestration steps are related to each other. Since the first one contains a ClaimsProviderSelection, it allows the user to select the desired identity provider they would like to sign-in with. The following orchestration step, must contain the actual execution of the selected button by referencing a technical profile.         The type of orchestration step 1, is ClaimsProviderSelection. This indicates that the orchestration step presents various claims providers to the user for them to select.   The first orchestration step also specifies the identifier of the content definition associated with this orchestration step (api.signuporsignin). B2C renders this content definition on the sign-up or sign-in page.   When a user clicks on the Facebook button (1), the policy executes the FacebookExchange claims exchange in the second orchestration step by executing the Facebook-OAUTH technical profile.   When a user signs-in with a local account (2) the LocalAccountSigninEmailExchange claims exchange is executed in the same orchestration step. The LocalAccountSigninEmailExchange claims exchange invokes the SelfAsserted-LocalAccountSignin-Email technical profile, which asks the user to provide their credentials and calls the login-NonInteractive to validate their credentials.        When a user clicks on sign up (3), the user skips to the second orchestration step, to execute the SignUpWithLogonEmailExchange claims exchange. B2C knows to call SignUpWithLogonEmailExchange because it’s configured in the SelfAsserted-LocalAccountSignin-Email technical profile metadata       &lt;Item Key=\"SignUpTarget\"&gt;SignUpWithLogonEmailExchange&lt;/Item&gt;          The rest of the orchestration steps always have a single claims exchange element. And may or may not contain preconditions.      Relying party policy  The applications (web or mobile) are called Relying Party, because they rely on the Identity Provider (Azure AD BC). A relying party application calls the relying party policy.  The RP policy file executes a specific user journey. The relying party policy specifies:     The tenant name and policy name.   The base policy to inherit from.   The Default User Journey which specified which user journey to be executed. The user journey itself must be configured in one of the policy files in the hierarchy chain, including the relying party policy itself.   The output claims specify the list of claims to be included in the id token and sent back to the application.      ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/xml-elements/",
        "teaser": null
      },{
        "title": "Concepts",
        "excerpt":"Local account policy   The following article will make use of the learnings from previous articles in order to understand how a Local Account sign in and sign up is achieved.   The Local Accounts starter pack can be found here. The files of interest are TrustFrameworkBase.xml and TrustFrameworkExtensions.xml.   You will find the user journey and its orchestration steps in the TrustFrameworkBase.xml file, with the Id “SignUpOrSignIn”. Each Orchestration step and its referenced technical profile will be explained in detail in the following series.   For a user to be able to Sign in and Sign Up, the following User Experience must be translated into logical steps with a custom policy.   Logical Steps  Handling Sign In:     Display a page where the user can enter their email and password.   On the sign in page, display a link to sign up.   If the user submits their credentials (signs in), we must validate the credentials.   Issue an id token.   Handling Sign Up:     Display a page that allows users to enter their email, password and name.   Verify their email with a Timed One Time Passcode sent to their email address.   When the user completes a sign up, we must create their account.   Prevent a user to sign up with an existing email address.   Issue an id token.   Translating this into custom policies  Handling Sign In:     This requires a Self-Asserted technical profile. It must present output claims to obtain the email and password claims.   Use the combined sign in and sign up content definition which provides this for us.   Run a Validation technical profile to validate the credentials.   Read any additional information from the directory user object.   Call a technical profile to issue a token.   Handling Sign Up:     This requires a Self-Asserted technical profile. It must present output claims to obtain the email, password and name claims.   Make use of a special claim which enforced email verification.   Use a Validation technical profile to write the account to the directory. This Validation technical profile will be of type Azure Active Directory.   As part of writing the account configure the technical profile to throw an error if the account exists.   Read any additional information from the directory user object.   Call a technical profile to issue a token.   Handling Sign In  Orchestration Step 1: Provide functionality for a user to Sign in or Sign Up. This is achieved using a Self-Asserted technical profile and connected validation technical profile.   The XML required to generate this step is:   &lt;OrchestrationStep Order=\"1\" Type=\"CombinedSignInAndSignUp\" ContentDefinitionReferenceId=\"api.signuporsignin\"&gt;   &lt;ClaimsProviderSelections&gt;     &lt;ClaimsProviderSelection ValidationClaimsExchangeId=\"LocalAccountSigninEmailExchange\" /&gt;   &lt;/ClaimsProviderSelections&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"LocalAccountSigninEmailExchange\" TechnicalProfileReferenceId=\"SelfAsserted-LocalAccountSignin-Email\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   The combined sign in and sign up page is treated specially by Azure AD B2C, since it presents a sign up link that can take the user to the sign up step. This is achieved with the following two lines:   &lt;OrchestrationStep Order=\"1\" Type=\"CombinedSignInAndSignUp\" ContentDefinitionReferenceId=\"api.signuporsignin\"&gt;   Since Azure AD B2C understands that this is a Sign In page, you must specify the ClaimsProviderSelections element with at least one reference to a ClaimsProviderSelection. This ClaimsProviderSelection maps to the ClaimsExchange which ultimately calls a technical profile called SelfAsserted-LocalAccountSignin-Email.   The SelfAsserted-LocalAccountSignin-Email technical profile defines the actual page functionality:   &lt;TechnicalProfile Id=\"SelfAsserted-LocalAccountSignin-Email\"&gt;   &lt;DisplayName&gt;Local Account Signin&lt;/DisplayName&gt;   &lt;Protocol Name=\"Proprietary\" Handler=\"Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"SignUpTarget\"&gt;SignUpWithLogonEmailExchange&lt;/Item&gt;     &lt;Item Key=\"setting.operatingMode\"&gt;Email&lt;/Item&gt;     &lt;Item Key=\"ContentDefinitionReferenceId\"&gt;api.selfasserted&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"signInName\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInName\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"password\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" /&gt;   &lt;/OutputClaims&gt;   &lt;ValidationTechnicalProfiles&gt;     &lt;ValidationTechnicalProfile ReferenceId=\"login-NonInteractive\" /&gt;   &lt;/ValidationTechnicalProfiles&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that this orchestration step calls.                 DisplayName       Friendly name which can describe the function of this technical profile.                 Protocol       The Azure AD B2C technical profile type. In this case, it is Self-Asserted, such that a page is rendered for the user to provide their inputs.                 Metadata       For a Self Asserted Combined Sign in and Sign up profile, we provide a SignUpTarget which points to the Sign Up ClaimsExchange Id in a subsequent orchestrations step.                 InputClaims       Enables the ability to pre-populate the signInName claim                 OutputClaims       We require the user to provide their email and password, hence referenced as output claims. There are some claims here, such as objectId, that are not presented on the page since the validation technical profile satisfies this output claim.                 ValidationTechnicalProfiles       The technical profile to launch to validate the date the user provided, in this case to validate their credentials.                 UseTechnicalProfileForSessionManagement       TO DO           To see all the configuration options for a Self-Asserted technical profile, find more here.   By calling this technical profile we now satisfy the initial logical step for sign in. When the user submits the page, the Validation technical profile will run - login-NonInteractive.   This is a technical profile which makes an OpenID request using the Resource Owner Password Credential grant flow to validate the users provided credentials at the Azure AD authorization server. Essentially this is an API based logon which the Azure AD B2C server will complete against the Azure AD authorization server.   &lt;TechnicalProfile Id=\"login-NonInteractive\"&gt;   &lt;DisplayName&gt;Local Account SignIn&lt;/DisplayName&gt;   &lt;Protocol Name=\"OpenIdConnect\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"UserMessageIfClaimsPrincipalDoesNotExist\"&gt;We can't seem to find your account&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfInvalidPassword\"&gt;Your password is incorrect&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfOldPasswordUsed\"&gt;Looks like you used an old password&lt;/Item&gt;      &lt;Item Key=\"ProviderName\"&gt;https://sts.windows.net/&lt;/Item&gt;     &lt;Item Key=\"METADATA\"&gt;https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration&lt;/Item&gt;     &lt;Item Key=\"authorization_endpoint\"&gt;https://login.microsoftonline.com/{tenant}/oauth2/token&lt;/Item&gt;     &lt;Item Key=\"response_types\"&gt;id_token&lt;/Item&gt;     &lt;Item Key=\"response_mode\"&gt;query&lt;/Item&gt;     &lt;Item Key=\"scope\"&gt;email openid&lt;/Item&gt;      &lt;!-- Policy Engine Clients --&gt;     &lt;Item Key=\"UsePolicyInRedirectUri\"&gt;false&lt;/Item&gt;     &lt;Item Key=\"HttpBinding\"&gt;POST&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"signInName\" PartnerClaimType=\"username\" Required=\"true\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"password\" Required=\"true\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"grant_type\" DefaultValue=\"password\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"scope\" DefaultValue=\"openid\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"nca\" PartnerClaimType=\"nca\" DefaultValue=\"1\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" PartnerClaimType=\"oid\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"tenantId\" PartnerClaimType=\"tid\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" PartnerClaimType=\"given_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surName\" PartnerClaimType=\"family_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" PartnerClaimType=\"name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" PartnerClaimType=\"upn\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" DefaultValue=\"localAccountAuthentication\" /&gt;   &lt;/OutputClaims&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that this orchestration step calls.                 DisplayName       Friendly name which can describe the function of this technical profile.                 Protocol       The Azure AD B2C technical profile type. In this case, it is OpenId, such that Azure AD B2C understands to make an OpenId request.                 Metadata       Various configuration options to make a valid OpenId request since the grant_type is configured password and the HTTP binding is set to POST.  This also includes various error handling responses, such as incorrect password.                 InputClaims       Passes the username and password into the POST body of the OpenId request.                 OutputClaims       Maps the JWT issued by the authorization server into Azure AD B2C’s claim bag. Here we obtain the objectId and authenticationSource, hence it is not shown on the Self-Asserted page.           To see all the configuration options for an OpenID technical profile, find more here.   At this point we have now rendered a sign in page to the user, enter their email and password, and validate their credentials.   Orchestration Step 3 - Read any additional data from the user object.   We maybe storing additional data the user provided or other data on the user object which allows your application/service to function correctly.   Therefore, we will read the user object for any desired attributes to add into the Azure AD B2C claims bag.   The following Orchestration step calls a technical profile called AAD-UserReadUsingObjectId which provides this functionality. The ClaimsExchange Id is unique name for this claims exchange that you can set.   &lt;OrchestrationStep Order=\"3\" Type=\"ClaimsExchange\"&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"AADUserReadWithObjectId\" TechnicalProfileReferenceId=\"AAD-UserReadUsingObjectId\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"AAD-UserReadUsingObjectId\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Read&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalDoesNotExist\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"objectId\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInNames.emailAddress\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"otherMails\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt; &lt;/TechnicalProfile&gt;   This technical profile does not state a protocol, therefore is automatically of type Azure Active Directory, which provides the ability to read or write to the directory structure.                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that this orchestration step calls.                 Metadata       This is configured to read the directory. And to throw an error if the user is not found.                 InputClaims       This is asking to find a user account with the objectId in the Azure AD B2C claims bag. This objectId will have been received via the login-NonInteractive technical profile and output into the claims bag by the SelfAsserted-LocalAccountSignin-Email technical profile.                 OutputClaims       We are asking to read these claims from the directory. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           A special case must be noted for the signInNames.emailAddress, this references the attribute signInNames which is a collection of key value pairs. In this case we are reading back the emailAddress key within the signInNames attribute.   Orchestration Step 4 - Issue a an id token.   In the majority of user journeys, the journey will end by issuing an id token back to the application. This orchestration step looks as follows:   &lt;OrchestrationStep Order=\"4\" Type=\"SendClaims\" CpimIssuerTechnicalProfileReferenceId=\"JwtIssuer\" /&gt;   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"JwtIssuer\"&gt;   &lt;DisplayName&gt;JWT Issuer&lt;/DisplayName&gt;   &lt;Protocol Name=\"None\" /&gt;   &lt;OutputTokenFormat&gt;JWT&lt;/OutputTokenFormat&gt;   &lt;Metadata&gt;     &lt;Item Key=\"client_id\"&gt;{service:te}&lt;/Item&gt;     &lt;Item Key=\"issuer_refresh_token_user_identity_claim_type\"&gt;objectId&lt;/Item&gt;     &lt;Item Key=\"SendTokenResponseBodyWithJsonNumbers\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;     &lt;Key Id=\"issuer_refresh_token_key\" StorageReferenceId=\"B2C_1A_TokenEncryptionKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims /&gt;   &lt;OutputClaims /&gt; &lt;/TechnicalProfile&gt;   This step does not need configuring any further, but find out more here.   Handling Sign Up  To handle sign up, we must have one additional orchestration step which allows the user to provide their email, new password and name. And upon validating this information, we must write an account to the directory. the other steps are shared with the orchestration steps explained in Handling Sign in.   The additional orchestration step is as follows:   &lt;OrchestrationStep Order=\"2\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;objectId&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"SignUpWithLogonEmailExchange\" TechnicalProfileReferenceId=\"LocalAccountSignUpWithLogonEmail\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   Since orchestration steps run sequentially, we must not run this step if the user is trying to sign in, and only run if the user clicked the sign up link. This is achieved using the Precondition. Note that during the sign in phase, the Azure AD B2C claims bag will have an objectId populated after login-NonInteractive has run. Therefore we can use the existence of this claim to skip this step as follows.   &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;     &lt;Value&gt;objectId&lt;/Value&gt;     &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt; &lt;/Precondition&gt;   When displaying the Combined Sign in and Sign up page, it was mentioned that the metadata of the SelfAsserted-LocalAccountSignin-Email technical profile configures an item called SignUpTarget. This enables the Sign Up link on the Combined Sign in and Sign up page to call the claims exchange in orchestration Step 2, which consequently executes the LocalAccountSignUpWithLogonEmail technical profile.   The technical profile is designed to capture the email, password and name of the user, and then write the account to the directory, as follows:   &lt;TechnicalProfile Id=\"LocalAccountSignUpWithLogonEmail\"&gt;   &lt;DisplayName&gt;Email signup&lt;/DisplayName&gt;   &lt;Protocol Name=\"Proprietary\" Handler=\"Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"IpAddressClaimReferenceId\"&gt;IpAddress&lt;/Item&gt;     &lt;Item Key=\"ContentDefinitionReferenceId\"&gt;api.localaccountsignup&lt;/Item&gt;     &lt;Item Key=\"language.button_continue\"&gt;Create&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"email\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"Verified.Email\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newPassword\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"reenterPassword\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"executed-SelfAsserted-Input\" DefaultValue=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" /&gt;      &lt;!-- Optional claims, to be collected from the user --&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surName\" /&gt;   &lt;/OutputClaims&gt;   &lt;ValidationTechnicalProfiles&gt;     &lt;ValidationTechnicalProfile ReferenceId=\"AAD-UserWriteUsingLogonEmail\" /&gt;   &lt;/ValidationTechnicalProfiles&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                   Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that this orchestration step calls.                 Metadata       Various configuration options available for a Self-Asserted page.                 InputClaims       Why do we have this here?                 OutputClaims       This asks the user to provide a verified email (via email verification), password and names. Other claims are satisfied by the validation technical profile, and therefore not displayed. They are there only such that those claims be available to subsequent steps after this step completes.                 ValidationTechnicalProfiles       When the user submits the page, we must validate the users email doesn’t already exist, and then write the account to the directory.                 UseTechnicalProfileForSessionManagement                   Azure AD B2C uses a special partner claim type to enforce email verification on a claim, as seen here:   &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"Verified.Email\" Required=\"true\" /&gt;   Here we are forcing the email claim presented on screen to be verified. Azure AD B2C will therefore render the Verify button on the page against this text field, and only allow the user to continue if this field was verified by a code sent to the users inbox. This technique can be used against any claim name presented to the user as an output claim (ClaimTypeReferenceId).   To see all the configuration options for a Self-Asserted technical profile, find more here.                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured with a reference to a content definition to provide your custom look and feel to this page.                 InputClaims       This will pre-popualte the email field if the email claim was acquired earlier in the journey.                 OutputClaims       These are claims that will be presented to the user on the rendered page, potentially prefilled based on the inputClaims status. Those claims which cannot be fulfilled by the user, such as objectId and newUser, are not shown on the screen as they are fulfilled by the validation technical profile being referenced.                 ValidationTechnicalProfile       A validation technical profile is used to write the user account when the user submits the page confirming their information.           To see all the configuration options for a Self-Asserted technical profile, find more here.   Azure AD B2C uses a special partner claim type to enforce email verification on a claim, as seen here:   &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"Verified.Email\" Required=\"true\" /&gt;   Here we are forcing the email claim presented on screen to be verified. Azure AD B2C will therefore render the Verify button on the page against this text field, and only allow the user to continue if this field was verified by a code sent to the users inbox. This technique can be used against any claim name presented to the user as an output claim (ClaimTypeReferenceId).   When the user submits the page, the Validation technical profile will run, called AAD-UserWriteUsingLogonEmail. This is called since either the user account can be written successfully based on the information provided, or it cannot be. In this case, the user account may not be able to be written if the account exists.   The AAD-UserWriteUsingLogonEmail is as follows:   &lt;TechnicalProfile Id=\"AAD-UserWriteUsingLogonEmail\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Write&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalAlreadyExists\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"signInNames.emailAddress\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;PersistedClaims&gt;     &lt;!-- Required claims --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"signInNames.emailAddress\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"newPassword\" PartnerClaimType=\"password\"/&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"displayName\" DefaultValue=\"unknown\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"passwordPolicies\" DefaultValue=\"DisablePasswordExpiration\" /&gt;      &lt;!-- Optional claims. --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/PersistedClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" PartnerClaimType=\"newClaimsPrincipalCreated\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" DefaultValue=\"localAccountAuthentication\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInNames.emailAddress\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured to write to the directory. And to throw an error if the user already exists with an error message.                 InputClaims       This is attempting to find a user account with the email provided as part of the sign up page - LocalAccountSignUpWithLogonEmail technical profile.                 PersistedClaims       This section defines which claims are to be written to the account. In this case, it will automatically create the account with this information present.                 OutputClaims       We are asking to read these claims from account which was just written. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           Orchestration Step 4 - Issue a an id token.   In the majority of user journeys, the journey will end by issuing an id token back to the application. This orchestration step looks as follows:   &lt;OrchestrationStep Order=\"4\" Type=\"SendClaims\" CpimIssuerTechnicalProfileReferenceId=\"JwtIssuer\" /&gt;   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"JwtIssuer\"&gt;   &lt;DisplayName&gt;JWT Issuer&lt;/DisplayName&gt;   &lt;Protocol Name=\"None\" /&gt;   &lt;OutputTokenFormat&gt;JWT&lt;/OutputTokenFormat&gt;   &lt;Metadata&gt;     &lt;Item Key=\"client_id\"&gt;{service:te}&lt;/Item&gt;     &lt;Item Key=\"issuer_refresh_token_user_identity_claim_type\"&gt;objectId&lt;/Item&gt;     &lt;Item Key=\"SendTokenResponseBodyWithJsonNumbers\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;     &lt;Key Id=\"issuer_refresh_token_key\" StorageReferenceId=\"B2C_1A_TokenEncryptionKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims /&gt;   &lt;OutputClaims /&gt; &lt;/TechnicalProfile&gt;   This step does not need configuring any further, but find out more here.   Summary  By reducing the user experience to a set of logical steps, we have translated these to a set of Orchestration Steps within an Azure AD B2C policy. These orchestration steps then implement the functionality of each logical step by allowing the user to interact with pages and validate various information. Finally we issue an id token back to the application.   Local and social account policy   The following article will make use of the learnings from previous articles in order to understand how a Local and Social Account sign in and sign up is achieved with the starter pack files.   The Local Accounts starter pack can be found here. The files of interest are TrustFrameworkBase.xml and TrustFrameworkExtensions.xml.   You will find the user journey and its orchestration steps in the TrustFrameworkBase.xml file, with the Id “SignUpOrSignIn”. Each Orchestration step and its referenced technical profile will be explained in detail in the following series.   For a user to be able to Sign in and Sign Up, the following User Experience must be translated into logical steps with a custom policy.   Logical Steps  Handling Sign In for a Local Account:     Display a page where the user can enter their email and password.   On the sign in page, display a link to sign up.   If the user submits their credentials (signs in), we must validate the credentials.   Issue an id token.   Handling Sign In/Up for a SocialAccount:     Display a page where the user can select to use their Facebook account.   When the user clicks to “Login with Facebook”, the user will be redirected to Facebook.   When the user returns from Facebook, read the information Facebook provided.   Lookup the account in the Azure AD B2C directory to determine if this user has already signed in with Facebook previously.   Display a page where the user can modify the data, returned from Facebook about their profile if this is their first time logging in with Facebook.   Write the account information to Azure AD B2C if the account was not already present in the directory.   Issue an id token.   Handling Sign Up for a Local Account:     Display a page that allows users to enter their email, password and name.   Verify their email with a Timed One Time Passcode sent to their email address.   When the user completes a sign up, we must create their account.   Prevent a user to sign up with an existing email address.   Issue an id token.   Translating this into custom policies  Handling Sign In for a Local Account:     This requires a Self-Asserted technical profile. It must present output claims to obtain the email and password claims.   Use the combined sign in and sign up content definition which provides this for us.   Run a Validation technical profile to validate the credentials.   Read any additional information from the directory user object.   Call a technical profile to issue a token.   Handling Sign In/Up for a SocialAccount:      Display a page where the user can select to use their Facebook account.   When the user clicks to “Login with Facebook”, the user will be redirected to Facebook.   Lookup the account in the Azure AD B2C directory to determine if this user has already signed in with Facebook previously.   Display a page where the user can modify the data, returned from Facebook about their profile if this is their first time logging in with Facebook.   Write the account information to Azure AD B2C if the account was not already present in the directory.        Issue an id token.       Using the combined sign in and sign up page, we must instruct Azure AD B2C that there is a new claims provider - Facebook. This will present a button on the page to “Login with Facebook”   An OAuth2 technical profile must be configured to be able to redirect the user to Facebook.   Use an Azure Active Directory technical profile to read the directory based off of the user identifier returned from Facebook. Usually the subject claim.   Use a Self-Asserted technical profile which presents the first name and last name retrieved from Facebook in editable text boxes.   Use an Azure Active Directory technical profile to write the account data into the Azure AD B2C directory.   Call a technical profile to issue a token.   Handling Sign Up for a Local Account:     This requires a Self-Asserted technical profile. It must present output claims to obtain the email, password and name claims.   Make use of a special claim which enforced email verification.   Use a Validation technical profile to write the account to the directory. This Validation technical profile will be of type Azure Active Directory.   As part of writing the account configure the technical profile to throw an error if the account exists.   Read any additional information from the directory user object.   Call a technical profile to issue a token.   Understand the SocialAndLocalAccounts starterpack implementation:   The SocialAndLocalAccounts starter pack comes pre built with a lot of functionality for the various scenarios presented within the starter pack - Sign In, Sign Up, Password Reset and Profile Edit. When reading the user journey for a social and local account sign up or sign in, a fraction of the foundational elements contained within the files are being used. The following will unpick the elements and describe in detail the operation of a single journey.   Handling Sign In for a Local Account and Social Account:  Orchestration Step 1: Provide functionality for a user to Sign in or Sign Up. This is achieved using a Self-Asserted technical profile and connected validation technical profile.   The XML required to generate this step is:   &lt;OrchestrationStep Order=\"1\" Type=\"CombinedSignInAndSignUp\" ContentDefinitionReferenceId=\"api.signuporsignin\"&gt;   &lt;ClaimsProviderSelections&gt;     &lt;ClaimsProviderSelection TargetClaimsExchangeId=\"FacebookExchange\" /&gt;     &lt;ClaimsProviderSelection ValidationClaimsExchangeId=\"LocalAccountSigninEmailExchange\" /&gt;   &lt;/ClaimsProviderSelections&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"LocalAccountSigninEmailExchange\" TechnicalProfileReferenceId=\"SelfAsserted-LocalAccountSignin-Email\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   The combined sign in and sign up page is treated specially by Azure AD B2C, since it presents a sign up link that can take the user to the sign up step. This is achieved with the following two lines:   &lt;OrchestrationStep Order=\"1\" Type=\"CombinedSignInAndSignUp\" ContentDefinitionReferenceId=\"api.signuporsignin\"&gt;   Since Azure AD B2C understands that this is a Sign In page, you must specify the ClaimsProviderSelections element with at least one reference to a ClaimsProviderSelection. This ClaimsProviderSelection maps to the ClaimsExchange. In this case, there are two ClaimsProviderSelection elements, such that Azure AD B2C understands that there is a Local Account and Facebook option to present on the page. The Local Account ClaimsProviderSelection maps to the LocalAccountSigninEmailExchange claims exchange, which will call the SelfAsserted-LocalAccountSignin-Email technical profile.   The SelfAsserted-LocalAccountSignin-Email technical profile defines the actual page functionality, allowing the user to sign in:   &lt;TechnicalProfile Id=\"SelfAsserted-LocalAccountSignin-Email\"&gt;   &lt;DisplayName&gt;Local Account Signin&lt;/DisplayName&gt;   &lt;Protocol Name=\"Proprietary\" Handler=\"Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"SignUpTarget\"&gt;SignUpWithLogonEmailExchange&lt;/Item&gt;     &lt;Item Key=\"setting.operatingMode\"&gt;Email&lt;/Item&gt;     &lt;Item Key=\"ContentDefinitionReferenceId\"&gt;api.selfasserted&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"signInName\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInName\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"password\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" /&gt;   &lt;/OutputClaims&gt;   &lt;ValidationTechnicalProfiles&gt;     &lt;ValidationTechnicalProfile ReferenceId=\"login-NonInteractive\" /&gt;   &lt;/ValidationTechnicalProfiles&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere, in this case from the Orchestration step.                 DisplayName       Friendly name which can describe the function of this technical profile.                 Protocol       The Azure AD B2C technical profile type. In this case, it is Self-Asserted, such that a page is rendered for the user to provide their inputs.                 Metadata       For a Self Asserted Combined Sign in and Sign up profile, we provide a SignUpTarget which points to the Sign Up ClaimsExchange Id in a subsequent orchestrations step.                 InputClaims       Enables the ability to pre-populate the signInName claim                 OutputClaims       We require the user to provide their email and password, hence referenced as output claims. There are some claims here, such as objectId, that are not presented on the page since the validation technical profile satisfies this output claim.                 ValidationTechnicalProfiles       The technical profile to launch to validate the date the user provided, in this case to validate their credentials.                 UseTechnicalProfileForSessionManagement       TO DO           To see all the configuration options for a Self-Asserted technical profile, find more here.   By calling this technical profile we now satisfy the initial logical step for sign in. When the user submits the page, the Validation technical profile will run, called login-NonInteractive.     &lt;ValidationTechnicalProfile ReferenceId=\"login-NonInteractive\" /&gt;   This is a technical profile which makes an OpenID request using the Resource Owner Password Credential grant flow to validate the users credentials at the Azure AD authorization server. Essentially this is an API based logon which the Azure AD B2C server will complete against the Azure AD authorization server.   &lt;TechnicalProfile Id=\"login-NonInteractive\"&gt;   &lt;DisplayName&gt;Local Account SignIn&lt;/DisplayName&gt;   &lt;Protocol Name=\"OpenIdConnect\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"UserMessageIfClaimsPrincipalDoesNotExist\"&gt;We can't seem to find your account&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfInvalidPassword\"&gt;Your password is incorrect&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfOldPasswordUsed\"&gt;Looks like you used an old password&lt;/Item&gt;      &lt;Item Key=\"ProviderName\"&gt;https://sts.windows.net/&lt;/Item&gt;     &lt;Item Key=\"METADATA\"&gt;https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration&lt;/Item&gt;     &lt;Item Key=\"authorization_endpoint\"&gt;https://login.microsoftonline.com/{tenant}/oauth2/token&lt;/Item&gt;     &lt;Item Key=\"response_types\"&gt;id_token&lt;/Item&gt;     &lt;Item Key=\"response_mode\"&gt;query&lt;/Item&gt;     &lt;Item Key=\"scope\"&gt;email openid&lt;/Item&gt;      &lt;!-- Policy Engine Clients --&gt;     &lt;Item Key=\"UsePolicyInRedirectUri\"&gt;false&lt;/Item&gt;     &lt;Item Key=\"HttpBinding\"&gt;POST&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"signInName\" PartnerClaimType=\"username\" Required=\"true\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"password\" Required=\"true\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"grant_type\" DefaultValue=\"password\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"scope\" DefaultValue=\"openid\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"nca\" PartnerClaimType=\"nca\" DefaultValue=\"1\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" PartnerClaimType=\"oid\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"tenantId\" PartnerClaimType=\"tid\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" PartnerClaimType=\"given_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surName\" PartnerClaimType=\"family_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" PartnerClaimType=\"name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" PartnerClaimType=\"upn\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" DefaultValue=\"localAccountAuthentication\" /&gt;   &lt;/OutputClaims&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 DisplayName       Friendly name which can describe the function of this technical profile.                 Protocol       The Azure AD B2C technical profile type. In this case, it is OpenId, such that Azure AD B2C understands to make an OpenId request.                 Metadata       Various configuration options with which to make a valid OpenId request. This also includes various error handling responses, such as incorrect password.                 InputClaims       Passes the username and password into the POST body of the OpenId request.                 OutputClaims       Maps the JWT issued by the authorization server into Azure AD B2C’s claim bag. Here we obtain the objectId and authenticationSource, hence it is not shown on the Self-Asserted page explained previously.           To see all the configuration options for an OpenId Connect technical profile, find more here.   At this point we have now rendered a sign in page to the user, has the option to Sign In with Facebook, or provide their email and password after which they are verified against the Directory.   Orchestration Step 2: Since Orchestration Step 1 provided a ClaimsProviderSelection for Facebook, this is satisfied in step 2 as part of a ClaimsExchange. Here the ClaimsProviderSelection for FacebookExchange is satisfied by referencing the Facebook-OAUTH technical profile, which provides the necessary means to redirect the user to Facebook for sign in.   &lt;!-- Check if the user has selected to sign in using one of the social providers --&gt; &lt;OrchestrationStep Order=\"2\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;objectId&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"FacebookExchange\" TechnicalProfileReferenceId=\"Facebook-OAUTH\" /&gt;     &lt;ClaimsExchange Id=\"SignUpWithLogonEmailExchange\" TechnicalProfileReferenceId=\"LocalAccountSignUpWithLogonEmail\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   The Facebook-OAUTH technical profile is as follows in the base file:   &lt;TechnicalProfile Id=\"Facebook-OAUTH\"&gt;   &lt;DisplayName&gt;Facebook&lt;/DisplayName&gt;   &lt;Protocol Name=\"OAuth2\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"ProviderName\"&gt;facebook&lt;/Item&gt;     &lt;Item Key=\"authorization_endpoint\"&gt;https://www.facebook.com/dialog/oauth&lt;/Item&gt;     &lt;Item Key=\"AccessTokenEndpoint\"&gt;https://graph.facebook.com/oauth/access_token&lt;/Item&gt;     &lt;Item Key=\"HttpBinding\"&gt;GET&lt;/Item&gt;     &lt;Item Key=\"UsePolicyInRedirectUri\"&gt;0&lt;/Item&gt;     &lt;Item Key=\"AccessTokenResponseFormat\"&gt;json&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"client_secret\" StorageReferenceId=\"B2C_1A_FacebookSecret\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims /&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"issuerUserId\" PartnerClaimType=\"id\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" PartnerClaimType=\"first_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surname\" PartnerClaimType=\"last_name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" PartnerClaimType=\"name\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"email\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"identityProvider\" DefaultValue=\"facebook.com\" AlwaysUseDefaultValue=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" DefaultValue=\"socialIdpAuthentication\" AlwaysUseDefaultValue=\"true\" /&gt;   &lt;/OutputClaims&gt;   &lt;OutputClaimsTransformations&gt;     &lt;OutputClaimsTransformation ReferenceId=\"CreateRandomUPNUserName\" /&gt;     &lt;OutputClaimsTransformation ReferenceId=\"CreateUserPrincipalName\" /&gt;     &lt;OutputClaimsTransformation ReferenceId=\"CreateAlternativeSecurityId\" /&gt;   &lt;/OutputClaimsTransformations&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-SocialLogin\" /&gt; &lt;/TechnicalProfile&gt;  |Element name  |Description  | |———|———| |TechnicalProfile Id | Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.| |DisplayName|Friendly name which can describe the function of this technical profile.| |Protocol|The Azure AD B2C technical profile type. In this case, it is OAuth2, such that Azure AD B2C understands to make an OAuth2 request.| |Metadata|Various configuration options with which to make a valid OAuth2 request. Some of these options are specific to Facebook’s requirements.| |InputClaims|There is nothing to send to Facebook, only an OAuth2 request.| |OutputClaims| Maps the JWT issued by the Facebook authorization server into Azure AD B2C’s claim bag. Some claims have default values assigned, hence are not asked from the user.| |OutputClaimsTransformations| Various claims transformations that are called to manipulate the data returned from the token sent back by Facebook before being added into the Azure AD B2C claims bag.|   And the Facebook-OAUTH technical profile has an augmentation in the Extensions file as follows to complete the setup. For administrators integrating Facebook login, these are the only parameters to modify, therefore they are added as augmentations into the Extension file, while the Base technical profile will be static for all environments.   &lt;TechnicalProfile Id=\"Facebook-OAUTH\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"client_id\"&gt;facebook_clientid&lt;/Item&gt;     &lt;Item Key=\"scope\"&gt;email public_profile&lt;/Item&gt;     &lt;Item Key=\"ClaimsEndpoint\"&gt;https://graph.facebook.com/me?fields=id,first_name,last_name,name,email&lt;/Item&gt;   &lt;/Metadata&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere or in this case has the same name as in the Base file to augment it.                         Metadata       Additional configuration options with which to make a valid OAuth2 request. These are specific to ones own federation with Facebook.           Here is the breakdown of each claims transformation that is run after the Facebook authentication succeeds and the token is returned back to Azure AD B2C. This applies to all external Identity Provider integration.   These are run such that pre-requisites for creating the account in Azure AD B2C and also for reading the account on subsequent sign in’s.   CreateRandomUPNUserName - This is required to generate a prefix for the userPrincipalName which will be stored on the user account when created.   &lt;ClaimsTransformation Id=\"CreateRandomUPNUserName\" TransformationMethod=\"CreateRandomString\"&gt;   &lt;InputParameters&gt;     &lt;InputParameter Id=\"randomGeneratorType\" DataType=\"string\" Value=\"GUID\" /&gt;   &lt;/InputParameters&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"upnUserName\" TransformationClaimType=\"outputClaim\" /&gt;   &lt;/OutputClaims&gt; &lt;/ClaimsTransformation&gt;  This claims transform generates a random string which is in the format of a GUID and issues it into the claim called upnUserName.   CreateUserPrincipalName - This creates the final userPrincipalName.   &lt;ClaimsTransformation Id=\"CreateUserPrincipalName\" TransformationMethod=\"FormatStringClaim\"&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"upnUserName\" TransformationClaimType=\"inputClaim\" /&gt;   &lt;/InputClaims&gt;   &lt;InputParameters&gt;     &lt;InputParameter Id=\"stringFormat\" DataType=\"string\" Value=\"cpim_{0}@{RelyingPartyTenantId}\" /&gt;   &lt;/InputParameters&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" TransformationClaimType=\"outputClaim\" /&gt;   &lt;/OutputClaims&gt; &lt;/ClaimsTransformation&gt;   This claims transform uses the FormatStringClaim method to create a string value using claims in the Azure AD B2C claim bag. The claim given to this transform is upnUserName, which is available from the output of the previous claims transform. Here the transform inserts the first input claim into {0} and Azure AD B2C knows the value of {RelyingPartyTenantId} already. Then end result is a fully formed userPrincipalName, which is output in the userPrincipalName claim: 00000000-0000-0000-0000-000000000000@something.onmicrosoft.com.   CreateAlternativeSecurityId - This creates a user identifier similar to an objectId which will be used to map the subject claim (sub) from the Facebook token to the Azure AD B2C user on subsequent logons. The generated identifier is output into the claim called alternativeSecurityId.   &lt;ClaimsTransformation Id=\"CreateAlternativeSecurityId\" TransformationMethod=\"CreateAlternativeSecurityId\"&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"issuerUserId\" TransformationClaimType=\"key\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"identityProvider\" TransformationClaimType=\"identityProvider\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"alternativeSecurityId\" TransformationClaimType=\"alternativeSecurityId\" /&gt;   &lt;/OutputClaims&gt; &lt;/ClaimsTransformation&gt;   After this, the Facebook login is complete, and the claims from the token received from Facebook have been transformed into useful entities for Azure AD B2C to use.   Orchestration Step 3: Read any additional data from the social account user object.   We need to determine if the social account has already been registered previously with this Azure AD B2C directory, or if this is their first logon via Facebook. Also we maybe storing additional data the user provided or other data on the user object which allows your application/service to function correctly.   Therefore, we will attempt to read the user object for any desired attributes to add into the Azure AD B2C claims bag. This technical profile is configured such that it does not throw an error if an account is not found.   The following Orchestration step calls a technical profile called AAD-UserReadUsingAlternativeSecurityId-NoError which provides this functionality. The ClaimsExchange Id is a unique name for this claims exchange that you can set.   &lt;!-- For social IDP authentication, attempt to find the user account in the directory. --&gt; &lt;OrchestrationStep Order=\"3\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimEquals\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;authenticationSource&lt;/Value&gt;       &lt;Value&gt;localAccountAuthentication&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"AADUserReadUsingAlternativeSecurityId\" TechnicalProfileReferenceId=\"AAD-UserReadUsingAlternativeSecurityId-NoError\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   A precondition is used such that this step is only run if a Social Account authentication had been completed. This is achieved by checking whether the value of authenticationSource claim is equal to localAccountAuthentication. If authenticationSource does contain the value localAccountAuthentication, then this step is skipped, otherwise it is executed.   The referenced technical profile appears as follows:   &lt;TechnicalProfile Id=\"AAD-UserReadUsingAlternativeSecurityId-NoError\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalDoesNotExist\"&gt;false&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-UserReadUsingAlternativeSecurityId\" /&gt; &lt;/TechnicalProfile&gt;   This technical profile is taking the AAD-UserReadUsingAlternativeSecurityId technical profile and applying a modification to it. The modification here is only to prevent an error being raised if the user is not found in the directory. This will provide an indication if this is the first logon via Facebook for this user, or a subsequent logon.   The following implements the AAD-UserReadUsingAlternativeSecurityId technical profile.   &lt;TechnicalProfile Id=\"AAD-UserReadUsingAlternativeSecurityId\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Read&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalDoesNotExist\"&gt;true&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfClaimsPrincipalDoesNotExist\"&gt;User does not exist. Please sign up before you can sign in.&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"AlternativeSecurityId\" PartnerClaimType=\"alternativeSecurityId\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;!-- Required claims --&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;!-- Optional claims --&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"otherMails\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt; &lt;/TechnicalProfile&gt;   This technical profile does not state a protocol, therefore is automatically of type Azure Active Directory, which provides the ability to read or write to the directory structure.                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured to read the directory. And to throw an error if the user is not found. This has been overridden by AAD-UserReadUsingAlternativeSecurityId-NoError.                 InputClaims       This is attempting to find a user account with the alternativeSecurityId generated in the claims transform after the Facebook sign in completed.                 OutputClaims       We are asking to read these claims from the directory. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           At this point the Azure AD B2C claims bag will now contain an objectId for the Social Account user who signed in, or not if this user is signing in for the first time.   Orchestration Step 4: A Self-Asserted technical profile is used to display a page to the user to see the imported data from Facebook, and have the ability to modify it. This is only presented to a user who has logged in for the first time with Facebook.   &lt;OrchestrationStep Order=\"4\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;objectId&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"SelfAsserted-Social\" TechnicalProfileReferenceId=\"SelfAsserted-Social\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   This contains a precondition which skips this step if an objectId was found, since the presence of an objectId would mean the user has already signed in for the first time.   The technical profile SelfAsserted-Social is as follows:   &lt;TechnicalProfile Id=\"SelfAsserted-Social\"&gt;   &lt;DisplayName&gt;User ID signup&lt;/DisplayName&gt;   &lt;Protocol Name=\"Proprietary\" Handler=\"Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"ContentDefinitionReferenceId\"&gt;api.selfasserted&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;InputClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"executed-SelfAsserted-Input\" DefaultValue=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/OutputClaims&gt;   &lt;ValidationTechnicalProfiles&gt;     &lt;ValidationTechnicalProfile ReferenceId=\"AAD-UserWriteUsingAlternativeSecurityId\" /&gt;   &lt;/ValidationTechnicalProfiles&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-SocialSignup\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       Provides information about the content definition to reference - which will give the page a customised look and feel.                 InputClaims       These claims ensure that any values retrieved in the previous steps, in this case Facebook authentication, are prefilled. Note that some of these claims may not have any value, for example, if Facebook did not provide any of these values, or if the claim did not appear in the OutputClaims section of the Facebook-OAUTH technical profile. In addition, if a claim is not in the InputClaims section, but it is in the OutputClaims section, then its value will not be prefilled, but the user will still be prompted for it (with an empty value).                 OutputClaims       These are claims that will be presented to the user on the rendered page, potentially prefilled based on the inputClaims status. Those claims which cannot be fulfilled by the user, such as objectId and newUser, are not shown on the screen as they are fulfilled by the validation technical profile being referenced.                 ValidationTechnicalProfile       A validation technical profile is used to write the user account when the user submits the page confirming their information.           When the user submits the page, the Validation technical profile will run, called AAD-UserWriteUsingAlternativeSecurityId. This is called since either the user account can be written successfully based on the information provided, or it cannot be. In this case, the user account should always get written successfully. However, this fits best as a validation technical profile in this case.     &lt;ValidationTechnicalProfile ReferenceId=\"AAD-UserWriteUsingAlternativeSecurityId\" /&gt;   This technical profile appears as follows:   &lt;TechnicalProfile Id=\"AAD-UserWriteUsingAlternativeSecurityId\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Write&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalAlreadyExists\"&gt;true&lt;/Item&gt;     &lt;Item Key=\"UserMessageIfClaimsPrincipalAlreadyExists\"&gt;You are already registered, please press the back button and sign in instead.&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaimsTransformations&gt;     &lt;InputClaimsTransformation ReferenceId=\"CreateOtherMailsFromEmail\" /&gt;   &lt;/InputClaimsTransformations&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"AlternativeSecurityId\" PartnerClaimType=\"alternativeSecurityId\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;PersistedClaims&gt;     &lt;!-- Required claims --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"alternativeSecurityId\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"userPrincipalName\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"mailNickName\" DefaultValue=\"unknown\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"displayName\" DefaultValue=\"unknown\" /&gt;      &lt;!-- Optional claims --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"otherMails\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/PersistedClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" PartnerClaimType=\"newClaimsPrincipalCreated\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"otherMails\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured to write to the directory. And to throw an error if the user already exists with an error message.                 InputClaimsTransformations                        InputClaims       This is attempting to find a user account with the alternativeSecurityId generated in the claims transform after the Facebook sign in completed.                 PersistedClaims       This section defines which claims are to be written when writing to an account.                 OutputClaims       We are asking to read these claims from account which was just written. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           Orchestration Step 5 - Read any additional data from the user object if it is a Local Account.   We maybe storing additional data the user provided or other data on the Local Account user object which allows your application/service to function correctly.   Therefore, we will read the user object for any desired attributes to add into the Azure AD B2C claims bag.   The following Orchestration step calls a technical profile called AAD-UserReadUsingObjectId which provides this functionality. The ClaimsExchange Id is unique name for this claims exchange that you can set.   &lt;OrchestrationStep Order=\"5\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimEquals\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;authenticationSource&lt;/Value&gt;       &lt;Value&gt;socialIdpAuthentication&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"AADUserReadWithObjectId\" TechnicalProfileReferenceId=\"AAD-UserReadUsingObjectId\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   A precondition is used such that this step is skipped if the value of authenticationSource is set to socialIdpAuthentication. This prevents it being run for Social Accounts, and only runs in the case of a Local Account logon.   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"AAD-UserReadUsingObjectId\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Read&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalDoesNotExist\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"objectId\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInNames.emailAddress\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"otherMails\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt; &lt;/TechnicalProfile&gt;   This technical profile does not state a protocol, therefore is automatically of type Azure Active Directory, which provides the ability to read or write to the directory structure.                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that this orchestration step calls.                 Metadata       This is configured to read the directory. And to throw an error if the user is not found.                 InputClaims       This is asking to find a user account with the objectId in the Azure AD B2C claims bag. This objectId will have been received via the login-NonInteractive technical profile and output into the claims bag by the SelfAsserted-LocalAccountSignin-Email technical profile.                 OutputClaims       We are asking to read these claims from the directory. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           A special case must be noted for the signInNames.emailAddress, this references the attribute signInNames which is a collection of key value pairs. In this case we are reading back the emailAddress key within the signInNames attribute.   Orchestration Step 6: In the case that the Orchestration step 4 was removed, there is a backup option here to write the Social Account into the directory at this point in the journey. In such a case, the objectId would not yet exist in the Azure AD B2C claims bag, therefore a precondition is used such that this step is executed if one is still not present.   &lt;OrchestrationStep Order=\"6\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;objectId&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"AADUserWrite\" TechnicalProfileReferenceId=\"AAD-UserWriteUsingAlternativeSecurityId\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   The functionality of the AAD-UserWriteUsingAlternativeSecurityId has already been explored earlier.   Orchestration Step 7:- Issue an id token.   In the majority of user journeys, the journey will end by issuing an id token back to the application. This orchestration step looks as follows:   &lt;OrchestrationStep Order=\"7\" Type=\"SendClaims\" CpimIssuerTechnicalProfileReferenceId=\"JwtIssuer\" /&gt;   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"JwtIssuer\"&gt;   &lt;DisplayName&gt;JWT Issuer&lt;/DisplayName&gt;   &lt;Protocol Name=\"None\" /&gt;   &lt;OutputTokenFormat&gt;JWT&lt;/OutputTokenFormat&gt;   &lt;Metadata&gt;     &lt;Item Key=\"client_id\"&gt;{service:te}&lt;/Item&gt;     &lt;Item Key=\"issuer_refresh_token_user_identity_claim_type\"&gt;objectId&lt;/Item&gt;     &lt;Item Key=\"SendTokenResponseBodyWithJsonNumbers\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;     &lt;Key Id=\"issuer_refresh_token_key\" StorageReferenceId=\"B2C_1A_TokenEncryptionKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims /&gt;   &lt;OutputClaims /&gt; &lt;/TechnicalProfile&gt;   This step does not need configuring any further, but find out more here on available options.   Handling Local Account Sign Up  To handle sign up, we must have one additional orchestration step which allows the user to provide their email, new password and name. And upon validating this information, we must write an account to the directory. the other steps are shared with the orchestration steps explained in Handling Sign in.   The additional orchestration step is as follows:   &lt;OrchestrationStep Order=\"2\" Type=\"ClaimsExchange\"&gt;   &lt;Preconditions&gt;     &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;       &lt;Value&gt;objectId&lt;/Value&gt;       &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt;     &lt;/Precondition&gt;   &lt;/Preconditions&gt;   &lt;ClaimsExchanges&gt;     &lt;ClaimsExchange Id=\"SignUpWithLogonEmailExchange\" TechnicalProfileReferenceId=\"LocalAccountSignUpWithLogonEmail\" /&gt;   &lt;/ClaimsExchanges&gt; &lt;/OrchestrationStep&gt;   Since orchestration steps run sequentially, we must not run this step if the user is trying to sign in, and only run if the user clicked the sign up link. This is achieved using the Precondition. Note, that during the sign in phase, the Azure AD B2C claims bag will have an objectId populated after login-NonInteractive has run. Therefore we can use the existence of this claim to skip this step as follows.   &lt;Precondition Type=\"ClaimsExist\" ExecuteActionsIf=\"true\"&gt;     &lt;Value&gt;objectId&lt;/Value&gt;     &lt;Action&gt;SkipThisOrchestrationStep&lt;/Action&gt; &lt;/Precondition&gt;   When displaying the Combined Sign in and Sign up page, it was mentioned that the metadata of the SelfAsserted-LocalAccountSignin-Email technical profile configures an item called SignUpTarget. This enables the Sign Up link on the Combined Sign in and Sign up page to call the claims exchange in orchestration Step 2, which consequently executes the LocalAccountSignUpWithLogonEmail technical profile.   The technical profile is designed to capture the email, password and name of the user, and then write the account to the directory, as follows:   &lt;TechnicalProfile Id=\"LocalAccountSignUpWithLogonEmail\"&gt;   &lt;DisplayName&gt;Email signup&lt;/DisplayName&gt;   &lt;Protocol Name=\"Proprietary\" Handler=\"Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" /&gt;   &lt;Metadata&gt;     &lt;Item Key=\"IpAddressClaimReferenceId\"&gt;IpAddress&lt;/Item&gt;     &lt;Item Key=\"ContentDefinitionReferenceId\"&gt;api.localaccountsignup&lt;/Item&gt;     &lt;Item Key=\"language.button_continue\"&gt;Create&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"email\" /&gt;   &lt;/InputClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"Verified.Email\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newPassword\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"reenterPassword\" Required=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"executed-SelfAsserted-Input\" DefaultValue=\"true\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" /&gt;      &lt;!-- Optional claims, to be collected from the user --&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"displayName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"surName\" /&gt;   &lt;/OutputClaims&gt;   &lt;ValidationTechnicalProfiles&gt;     &lt;ValidationTechnicalProfile ReferenceId=\"AAD-UserWriteUsingLogonEmail\" /&gt;   &lt;/ValidationTechnicalProfiles&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                   Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured with a reference to a content definition to provide your custom look and feel to this page.                 InputClaims       This will pre-popualte the email field if the email claim was acquired earlier in the journey.                 OutputClaims       These are claims that will be presented to the user on the rendered page, potentially prefilled based on the inputClaims status. Those claims which cannot be fulfilled by the user, such as objectId and newUser, are not shown on the screen as they are fulfilled by the validation technical profile being referenced.                 ValidationTechnicalProfile       A validation technical profile is used to write the user account when the user submits the page confirming their information.           To see all the configuration options for a Self-Asserted technical profile, find more here.   Azure AD B2C uses a special partner claim type to enforce email verification on a claim, as seen here:  &lt;OutputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"Verified.Email\" Required=\"true\" /&gt;  Here we are forcing the email claim presented on screen to be verified. Azure AD B2C will therefore render the Verify button on the page against this text field, and only allow the user to continue if this field was verified by a code sent to the users inbox. This technique can be used against any claim name presented to the user as an output claim (ClaimTypeReferenceId).   When the user submits the page, the Validation technical profile will run, called AAD-UserWriteUsingLogonEmail. This is called since either the user account can be written successfully based on the information provided, or it cannot be. In this case, the user account may not be able to be written if the account exists.   The AAD-UserWriteUsingLogonEmail is as follows:   &lt;TechnicalProfile Id=\"AAD-UserWriteUsingLogonEmail\"&gt;   &lt;Metadata&gt;     &lt;Item Key=\"Operation\"&gt;Write&lt;/Item&gt;     &lt;Item Key=\"RaiseErrorIfClaimsPrincipalAlreadyExists\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;IncludeInSso&gt;false&lt;/IncludeInSso&gt;   &lt;InputClaims&gt;     &lt;InputClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"signInNames.emailAddress\" Required=\"true\" /&gt;   &lt;/InputClaims&gt;   &lt;PersistedClaims&gt;     &lt;!-- Required claims --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"email\" PartnerClaimType=\"signInNames.emailAddress\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"newPassword\" PartnerClaimType=\"password\"/&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"displayName\" DefaultValue=\"unknown\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"passwordPolicies\" DefaultValue=\"DisablePasswordExpiration\" /&gt;      &lt;!-- Optional claims. --&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"givenName\" /&gt;     &lt;PersistedClaim ClaimTypeReferenceId=\"surname\" /&gt;   &lt;/PersistedClaims&gt;   &lt;OutputClaims&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"objectId\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"newUser\" PartnerClaimType=\"newClaimsPrincipalCreated\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"authenticationSource\" DefaultValue=\"localAccountAuthentication\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"userPrincipalName\" /&gt;     &lt;OutputClaim ClaimTypeReferenceId=\"signInNames.emailAddress\" /&gt;   &lt;/OutputClaims&gt;   &lt;IncludeTechnicalProfile ReferenceId=\"AAD-Common\" /&gt;   &lt;UseTechnicalProfileForSessionManagement ReferenceId=\"SM-AAD\" /&gt; &lt;/TechnicalProfile&gt;                  Element name       Description                       TechnicalProfile Id       Identifier for this technical profile. It is used to find the technical profile that is referenced elsewhere.                 Metadata       This is configured to write to the directory. And to throw an error if the user already exists with an error message.                 InputClaims       This is attempting to find a user account with the email provided as part of the sign up page - LocalAccountSignUpWithLogonEmail technical profile.                 PersistedClaims       This section defines which claims are to be written to the account. In this case, it will automatically create the account with this information present.                 OutputClaims       We are asking to read these claims from account which was just written. The Azure AD B2C claims referenced here have the same name as the attribute name in the directory.                 IncludeTechnicalProfile       AAD-Common is included to provide the foundational functionality to read or write to the directory.           *Orchestration Step 7**:- Issue an id token.   In the majority of user journeys, the journey will end by issuing an id token back to the application. This orchestration step looks as follows:   &lt;OrchestrationStep Order=\"7\" Type=\"SendClaims\" CpimIssuerTechnicalProfileReferenceId=\"JwtIssuer\" /&gt;   The referenced technical profile is as follows:   &lt;TechnicalProfile Id=\"JwtIssuer\"&gt;   &lt;DisplayName&gt;JWT Issuer&lt;/DisplayName&gt;   &lt;Protocol Name=\"None\" /&gt;   &lt;OutputTokenFormat&gt;JWT&lt;/OutputTokenFormat&gt;   &lt;Metadata&gt;     &lt;Item Key=\"client_id\"&gt;{service:te}&lt;/Item&gt;     &lt;Item Key=\"issuer_refresh_token_user_identity_claim_type\"&gt;objectId&lt;/Item&gt;     &lt;Item Key=\"SendTokenResponseBodyWithJsonNumbers\"&gt;true&lt;/Item&gt;   &lt;/Metadata&gt;   &lt;CryptographicKeys&gt;     &lt;Key Id=\"issuer_secret\" StorageReferenceId=\"B2C_1A_TokenSigningKeyContainer\" /&gt;     &lt;Key Id=\"issuer_refresh_token_key\" StorageReferenceId=\"B2C_1A_TokenEncryptionKeyContainer\" /&gt;   &lt;/CryptographicKeys&gt;   &lt;InputClaims /&gt;   &lt;OutputClaims /&gt; &lt;/TechnicalProfile&gt;   This step does not need configuring any further, but find out more here on available options.   Summary   By reducing the user experience to a set of logical steps, we have translated these to a set of Orchestration Steps within an Azure AD B2C policy. These orchestration steps then implement the functionality of each logical step by allowing the user to interact with pages and validate various information. Finally we issue an id token back to the application.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/custom-policy-code-walkthrough/",
        "teaser": null
      },{
        "title": "Best practices",
        "excerpt":"Best practices  Within an Azure AD B2C custom policy, you can integrate your own business logic to build the user experiences your require and extend functionality of the service. We have a set of best practices and recommendations to get started.      Within the base policy, we suggest avoiding making any changes.  And if required, make heavy notes. Instead, create your logic within the extension files. You can add new elements which will override the base policy by referencing the same Id. This will allow you to scale out your project while making it easier to upgrade base policy later on if Microsoft releases new starter packs.   Configure your user journey in the extension file only.   New elements should be added to the extension file. You can still override the technical profile configured in the base policy, in the extension file with new elements by referencing the original technical profile Id.   Customize elements defined in the base policy     To customize any element from the base policy, you simply copy the element with its parent elements, and make the necessary changes.   Want to add something new? That’s OK! Make sure you copy over all of those claims from the base policy.    When overriding a Self-Asserted technical profile by adding new Output Claims, the new claim will be rendered first. To change the order, make sure you include all of the claims from the base policy and arrange the output claims in the order you require them to be rendered.   In the following example, the Facebook policy is configured in the base policy, while in the extension policy you must specify the Facebook application Id, the scopes to use and the information you want to retrieve from Facebook. The extension contains the values that are related to your environment like the scopes that are relevant to you in the interaction with Facebook.      Including technical profile  You can create a technical profile that is based on another one. Use the IncludeTechnicalProfile element to customize your technical profile.   For example AAD-UserReadUsingAlternativeSecurityId-NoError includes AAD-UserReadUsingAlternativeSecurityId, while configuring the RaiseErrorIfClaimsPrincipalDoesNotExist metadata item to false.   AAD-UserReadUsingAlternativeSecurityId itself includes the AAD-Common technical profile.   AAD-Common provides the base functionality to communicate with Azure AD over the AzureActiveDirectoryProvider propriety protocol.                  Include: When you include a technical profile, you create a new technical profile, that is based on another one. The one you create has a new name (id). You can declare a technical profile that includes any technical profile, in the same policy or in any policy that inherits from the policy  where the technical profile is configured.       For example, a technical profile “A” can be included in technical profile “B1” and “B2”. B1 itself can be included in technical profile “C” and so on.            Overwrite. Overwrite is always done in a policy that inherits from the policy where the technical profile is declared. When you overwrite, you do not change the technical profile name. You can overwrite a technical profile that is configured in any policy which is inherited by your current working policy file.          Escape XML invalid characters   If you need to include XML invalid characters in the XML policy file, use their escaped equivalents. The following table shows the invalid XML characters and their escaped equivalents.                  Invalid XML character       Replaced with                       &lt;       &amp;lt;                 &gt;       &amp;gt;                 \"       &amp;quot;                 '       &amp;apos;                 &amp;       &amp;amp;           ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/custom-policy-best-practices/",
        "teaser": null
      },{
        "title": "Baz Boom Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/portfolio/baz-boom-identity/",
        "teaser": "http://localhost:4000/assets/images/unsplash-gallery-image-1-th.jpg"
      },{
        "title": "Fizz Bang Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/portfolio/fizz-bang-identity/",
        "teaser": "http://localhost:4000/assets/images/unsplash-gallery-image-2-th.jpg"
      },{
        "title": "Foo Bar Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/portfolio/foo-bar-website/",
        "teaser": "http://localhost:4000/assets/images/foo-bar-identity-th.jpg"
      },{
        "title": "Ginger Gulp Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/portfolio/ginger-gulp-identity/",
        "teaser": "http://localhost:4000/assets/images/unsplash-gallery-image-3-th.jpg"
      },{
        "title": "Edge Case: Nested and Mixed Lists",
        "excerpt":"Nested and mixed lists are an interesting beast. It’s a corner case to make sure that      Lists within lists do not break the ordered list numbering order   Your list styles go deep enough.   Ordered – Unordered – Ordered      ordered item   ordered item            unordered       unordered                    ordered item           ordered item                           ordered item   ordered item   Ordered – Unordered – Unordered      ordered item   ordered item            unordered       unordered                    unordered item           unordered item                           ordered item   ordered item   Unordered – Ordered – Unordered      unordered item   unordered item            ordered       ordered                    unordered item           unordered item                           unordered item   unordered item   Unordered – Unordered – Ordered      unordered item   unordered item            unordered       unordered                    ordered item           ordered item                           unordered item   unordered item   Task Lists      Finish my changes   Push my commits to GitHub   Open a pull request  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","lists","markup"],
        "url": "http://localhost:4000/edge%20case/edge-case-nested-and-mixed-lists/",
        "teaser": null
      },{
        "title": "Edge Case: Many Tags",
        "excerpt":"This post has many tags.  ","categories": ["Edge Case"],
        "tags": ["8BIT","alignment","Articles","captions","categories","chat","comments","content","css","dowork","edge case","embeds","excerpt","Fail","featured image","FTW","Fun","gallery","html","image","Jekyll","layout","link","Love","markup","Mothership","Must Read","Nailed It","Pictures","Post Formats","quote","standard","Success","Swagger","Tags","template","title","twitter","Unseen","video","YouTube"],
        "url": "http://localhost:4000/edge%20case/edge-case-many-tags/",
        "teaser": null
      },{
        "title": "Edge Case: Many Categories",
        "excerpt":"This post has many categories.  ","categories": ["aciform","antiquarianism","arrangement","asmodeus","broder","buying","championship","chastening","disinclination","disinfection","dispatch","echappee","enphagy"],
        "tags": ["categories","edge case"],
        "url": "http://localhost:4000/aciform/antiquarianism/arrangement/asmodeus/broder/buying/championship/chastening/disinclination/disinfection/dispatch/echappee/enphagy/edge-case-many-categories/",
        "teaser": null
      },{
        "title": "Edge Case: No Body Content",
        "excerpt":" ","categories": ["Edge Case"],
        "tags": ["content","edge case","layout"],
        "url": "http://localhost:4000/edge%20case/edge-case-no-body-content/",
        "teaser": null
      },{
        "title": "Edge Case No Yaml Title",
        "excerpt":"This post has no title specified in the YAML Front Matter. Jekyll should auto-generate a title from the filename.  ","categories": ["Edge Case"],
        "tags": ["edge case","layout","title"],
        "url": "http://localhost:4000/edge%20case/edge-case-no-yaml-title/",
        "teaser": null
      },{
        "title": "Edge Case: Post with multiline excerpt",
        "excerpt":"Et ex ullamco duis don’t combine these words quis laborum sunt sint. Nisi et Lorem reprehenderit cupidatat. Aliqua fugiat aliquip officia culpa elit. Adipisicing do eu duis aute et aute amet anim ut cillum aliqua. Aliqua adipisicing occaecat et ullamco fugiat.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/edge-case-multiline-excerpt/",
        "teaser": null
      },{
        "title": "Antidisestablishmentarianism",
        "excerpt":"Title should not overflow the content area   A few things to check for:      Non-breaking text in the title, content, and comments should have no adverse effects on layout or functionality.   Check the browser window / tab title.   If you are a theme developer, check that this text does not break anything.   The following CSS properties will help you support non-breaking text.   -ms-word-wrap: break-word; word-wrap: break-word;  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","html","layout","title"],
        "url": "http://localhost:4000/edge%20case/edge-case-title-should-not-overflow-the-content-area/",
        "teaser": null
      },{
        "title": "Suspicio? Bene ... tunc ibimus? Quis uh ... CONEXUS locus his diebus? Quisque semper aliquid videtur, in volutpat mauris. Nolo enim dicere. Vobis neque ab aliis. Ego feci memetipsum explicans. Gus mortuus est. Lorem opus habeo. Jackson Isai? Tu quoque ... A te quidem a ante. Vos scitis quod blinking res Ive 'been vocans super vos? Et conteram illud, et conteram hoc. Maledicant druggie excors. Iam hoc tu facere conatus sum ad te in omni tempore? Ludum mutavit. Verbum est ex. Et ... sunt occid",
        "excerpt":"Check for long titles and how they might break a template.  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","html","layout","title"],
        "url": "http://localhost:4000/edge%20case/edge-case-very-long-title/",
        "teaser": null
      },{
        "title": "Post: Modified Date",
        "excerpt":"This post has been updated and should show a modified date if used in a layout.   All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.  ","categories": ["Post Formats"],
        "tags": ["Post Formats","readability","standard"],
        "url": "http://localhost:4000/post%20formats/post-modified/",
        "teaser": null
      },{
        "title": "Post: Standard",
        "excerpt":"All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.   Mrs. Darling first heard of Peter when she was tidying up her children’s minds. It is the nightly custom of every good mother after her children are asleep to rummage in their minds and put things straight for next morning, repacking into their proper places the many articles that have wandered during the day.     This post has a manual excerpt &lt;!--more--&gt; set after the second paragraph. The following YAML Front Matter has also be applied:   excerpt_separator: \"&lt;!--more--&gt;\"   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": ["Post Formats"],
        "tags": ["Post Formats","readability","standard"],
        "url": "http://localhost:4000/post%20formats/post-standard/",
        "teaser": null
      },{
        "title": "Post: Chat",
        "excerpt":"Abbott: Strange as it may seem, they give ball players nowadays very peculiar names.   Costello: Funny names?   Abbott: Nicknames, nicknames. Now, on the St. Louis team we have Who’s on first, What’s on second, I Don’t Know is on third–   Costello: That’s what I want to find out. I want you to tell me the names of the fellows on the St. Louis team.   Abbott: I’m telling you. Who’s on first, What’s on second, I Don’t Know is on third–   Costello: You know the fellows’ names?   Abbott: Yes.   Costello: Well, then who’s playing first?   Abbott: Yes.   Costello: I mean the fellow’s name on first base.   Abbott: Who.   Costello: The fellow playin’ first base.   Abbott: Who.   Costello: The guy on first base.   Abbott: Who is on first.   Costello: Well, what are you askin’ me for?   Abbott: I’m not asking you–I’m telling you. Who is on first.   Costello: I’m asking you–who’s on first?   Abbott: That’s the man’s name.   Costello: That’s who’s name?   Abbott: Yes.   Costello: When you pay off the first baseman every month, who gets the money?   Abbott: Every dollar of it. And why not, the man’s entitled to it.   Costello: Who is?   Abbott: Yes.   Costello: So who gets it?   Abbott: Why shouldn’t he? Sometimes his wife comes down and collects it.   Costello: Who’s wife?   Abbott: Yes. After all, the man earns it.   Costello: Who does?   Abbott: Absolutely.   Costello: Well, all I’m trying to find out is what’s the guy’s name on first base?   Abbott: Oh, no, no. What is on second base.   Costello: I’m not asking you who’s on second.   Abbott: Who’s on first!   Costello: St. Louis has a good outfield?   Abbott: Oh, absolutely.   Costello: The left fielder’s name?   Abbott: Why.   Costello: I don’t know, I just thought I’d ask.   Abbott: Well, I just thought I’d tell you.   Costello: Then tell me who’s playing left field?   Abbott: Who’s playing first.   Costello: Stay out of the infield! The left fielder’s name?   Abbott: Why.   Costello: Because.   Abbott: Oh, he’s center field.   Costello: Wait a minute. You got a pitcher on this team?   Abbott: Wouldn’t this be a fine team without a pitcher?   Costello: Tell me the pitcher’s name.   Abbott: Tomorrow.   Costello: Now, when the guy at bat bunts the ball–me being a good catcher–I want to throw the guy out at first base, so I pick up the ball and throw it to who?   Abbott: Now, that’s he first thing you’ve said right.   Costello: I DON’T EVEN KNOW WHAT I’M TALKING ABOUT!   Abbott: Don’t get excited. Take it easy.   Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don’t know. I don’t know throws it back to tomorrow–a triple play.   Abbott: Yeah, it could be.   Costello: Another guy gets up and it’s a long ball to center.   Abbott: Because.   Costello: Why? I don’t know. And I don’t care.   Abbott: What was that?   Costello: I said, I DON’T CARE!   Abbott: Oh, that’s our shortstop!  ","categories": ["Post Formats"],
        "tags": ["chat","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-chat/",
        "teaser": null
      },{
        "title": "Post: Notice",
        "excerpt":"A notice displays information that explains nearby content. Often used to call attention to a particular detail.   When using Kramdown {: .notice} can be added after a sentence to assign the .notice to the &lt;p&gt;&lt;/p&gt; element.   Changes in Service: We just updated our privacy policy here to better service our customers. We recommend reviewing the changes.   Primary Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.      Primary Notice with code block: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.     &lt;html&gt;   &lt;body&gt;Some body.&lt;body&gt; &lt;/html&gt;      Info Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Warning Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Danger Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Success Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Want to wrap several paragraphs or other elements in a notice? Using Liquid to capture the content and then filter it with markdownify is a good way to go.   {% capture notice-2 %} #### New Site Features  * You can now have cover images on blog pages * Drafts will now auto-save while writing {% endcapture %}  &lt;div class=\"notice\"&gt;{{ notice-2 | markdownify }}&lt;/div&gt;       New Site Features      You can now have cover images on blog pages   Drafts will now auto-save while writing     Or you could skip the capture and stick with straight HTML.   &lt;div class=\"notice\"&gt;   &lt;h4&gt;Message&lt;/h4&gt;   &lt;p&gt;A basic message.&lt;/p&gt; &lt;/div&gt;      Message    A basic message.   ","categories": ["Post Formats"],
        "tags": ["Post Formats","notice"],
        "url": "http://localhost:4000/post%20formats/post-notice/",
        "teaser": null
      },{
        "title": "Post: Quote",
        "excerpt":"   Only one thing is impossible for God: To find any sense in any copyright law on the planet.       Mark Twain   ","categories": ["Post Formats"],
        "tags": ["Post Formats","quote"],
        "url": "http://localhost:4000/post%20formats/post-quote/",
        "teaser": null
      },{
        "title": "Post: Link",
        "excerpt":"This theme supports link posts, made famous by John Gruber. To use, just add link: http://url-you-want-linked to the post’s YAML front matter and you’re done.      And this is how a quote looks.    Some link can also be shown.  ","categories": ["Post Formats"],
        "tags": ["link","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-link/",
        "teaser": null
      },{
        "title": "Post: Video (YouTube)",
        "excerpt":"YouTube video embed below.    ","categories": ["Post Formats"],
        "tags": ["Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-video-youtube/",
        "teaser": null
      },{
        "title": "Post: Header Image with OpenGraph Override",
        "excerpt":"This post has a header image with an OpenGraph override.   header:   image: /assets/images/page-header-image.png   og_image: /assets/images/page-header-og-image.png  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/post-header-image-og-override/",
        "teaser": null
      },{
        "title": "Post: Overlay Image with OpenGraph Override",
        "excerpt":"This post has a header image with an OpenGraph override.   header:   overlay_image: /assets/images/unsplash-image-1.jpg   og_image: /assets/images/page-header-og-image.png   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"Learn more\"       url: \"https://unsplash.com\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/post-header-overlay-image-og-override/",
        "teaser": null
      },{
        "title": "Post: Image (with Link)",
        "excerpt":"  ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-image-linked/",
        "teaser": null
      },{
        "title": "Post: Image (Standard)",
        "excerpt":"The preferred way of using images is placing them in the /assets/images/ directory and referencing them with an absolute path. Prepending the filename with {{ site.url }}{{ site.baseurl }}/assets/images/ will make sure your images display properly in feeds and such.   Standard image with no width modifier classes applied.   HTML:   &lt;img src=\"{{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg\" alt=\"\"&gt;   or Kramdown:   ![alt]({{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg)      Image that fills page content container by adding the .full class with:   HTML:   &lt;img src=\"{{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg\" alt=\"\" class=\"full\"&gt;   or Kramdown:   ![alt]({{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg) {: .full}     ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-image-standard/",
        "teaser": null
      },{
        "title": "Post: Teaser Image with OpenGraph Override",
        "excerpt":"This post has a teaser image with an OpenGraph override.   header:   teaser: /assets/images/page-header-teaser.png   og_image: /assets/images/page-header-og-image.png  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/post-teaser-image-og-override/",
        "teaser": "http://localhost:4000/assets/images/page-header-teaser.png"
      },{
        "title": "Post: Image (Linked with Caption)",
        "excerpt":"          Image with a caption.   ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-image-linked-caption/",
        "teaser": null
      },{
        "title": "Post: Image (Caption)",
        "excerpt":"         Photo from Unsplash.  ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "http://localhost:4000/post%20formats/post-image-caption/",
        "teaser": null
      },{
        "title": "Post: Gallery",
        "excerpt":"These are gallery tests for image wrapped in &lt;figure&gt; elements.   To place a gallery add the necessary YAML Front Matter:   gallery:   - url: /assets/images/unsplash-gallery-image-1.jpg     image_path: /assets/images/unsplash-gallery-image-1-th.jpg     alt: \"placeholder image 1\"     title: \"Image 1 title caption\"   - url: /assets/images/unsplash-gallery-image-2.jpg     image_path: /assets/images/unsplash-gallery-image-2-th.jpg     alt: \"placeholder image 2\"     title: \"Image 2 title caption\"   - url: /assets/images/unsplash-gallery-image-3.jpg     image_path: /assets/images/unsplash-gallery-image-3-th.jpg     alt: \"placeholder image 3\"     title: \"Image 3 title caption\"   - url: /assets/images/unsplash-gallery-image-4.jpg     image_path: /assets/images/unsplash-gallery-image-4-th.jpg     alt: \"placeholder image 4\"     title: \"Image 4 title caption\"   And then drop-in the gallery include — gallery caption is optional.   {% include gallery caption=\"This is a sample gallery with **Markdown support**.\" %}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      This is a sample gallery with Markdown support.       This is some text after the gallery just to make sure that everything aligns properly.   Here comes another gallery, this time set the id to match 2nd gallery hash in YAML Front Matter.   gallery2:   - url: https://flic.kr/p/8a6Ven     image_path: https://farm2.staticflickr.com/1272/4697500467_8294dac099_q.jpg     alt: \"Black and grays with a hint of green\"   - url: https://flic.kr/p/8a738X     image_path: https://farm5.staticflickr.com/4029/4697523701_249e93ba23_q.jpg     alt: \"Made for open text placement\"   - url: https://flic.kr/p/8a6VXP     image_path: https://farm5.staticflickr.com/4046/4697502929_72c612c636_q.jpg     alt: \"Fog in the trees\"   And place it like so:   {% include gallery id=\"gallery2\" caption=\"This is a second gallery example with images hosted externally.\" %}                                                                                                                                This is a second gallery example with images hosted externally.       And for giggles one more gallery just to make sure this works. To fill page content container add class=\"full\".                                                      This is a third gallery example with two images and fills the entire content container.       Gallery column layout can be overrided by setting a layout.   {% include gallery id=\"gallery\" layout=\"half\" caption=\"This is a half gallery layout example.\" %}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      This is a half gallery layout example.      ","categories": ["Post Formats"],
        "tags": ["gallery","Post Formats","tiled"],
        "url": "http://localhost:4000/post%20formats/post-gallery/",
        "teaser": null
      },{
        "title": "Post: Twitter Embed",
        "excerpt":"🎨 Finally got around to adding all my @procreateapp creations with time lapse videos https://t.co/1nNbkefC3L pic.twitter.com/gcNLJoJ0Gn &mdash; Michael Rose (@mmistakes) November 6, 2015   This post tests Twitter Embeds.  ","categories": ["Media"],
        "tags": ["content","embeds","media","twitter"],
        "url": "http://localhost:4000/media/post-twitter-embeds/",
        "teaser": null
      },{
        "title": "Layout: Comments Disabled",
        "excerpt":"This post has its comments disabled.   There should be no comment form.  ","categories": ["Layout","Uncategorized"],
        "tags": ["comments","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-comments-disabled/",
        "teaser": null
      },{
        "title": "Layout: Comments Enabled",
        "excerpt":"This post should display comments if a provider is enabled.  ","categories": ["Layout","Uncategorized"],
        "tags": ["comments","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-comments/",
        "teaser": null
      },{
        "title": "Layout: Read Time Disabled",
        "excerpt":"This post has reading time disabled. The estimated time that it takes to read this post should not be showing if read_time: false is set in _config.yml or in this post’s YAML Front Matter.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["read time"],
        "url": "http://localhost:4000/layout-read-time-disabled/",
        "teaser": null
      },{
        "title": "Layout: Read Time Enabled",
        "excerpt":"This post has reading time enabled. The estimated time that it takes to read this post should show if also enabled in _config.yml with read_time: true.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["read time"],
        "url": "http://localhost:4000/layout-read-time/",
        "teaser": null
      },{
        "title": "Layout: Related Posts Disabled",
        "excerpt":"This post has related posts disabled.   Related post links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-related-posts-disabled/",
        "teaser": null
      },{
        "title": "Layout: Related Posts Enabled",
        "excerpt":"This post has related posts enabled.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-related-posts/",
        "teaser": null
      },{
        "title": "Layout: Social Sharing Links Disabled",
        "excerpt":"This post has social sharing disabled.   Social sharing links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["social","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-sharing-disabled/",
        "teaser": null
      },{
        "title": "Layout: Social Sharing Links Enabled",
        "excerpt":"This post should display social sharing links.  ","categories": ["Layout","Uncategorized"],
        "tags": ["social","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-sharing/",
        "teaser": null
      },{
        "title": "Layout: Reading Time, Comments, Social Sharing Links, and Related Posts Disabled",
        "excerpt":"This post has reading time, comments, social sharing links, and related posts disabled.   Reading time, comments, social sharing and related post links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","social","comments","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-read-time-comments-sharing-related-posts-disabled/",
        "teaser": null
      },{
        "title": "Layout: Post with Nested Table of Contents via Helper",
        "excerpt":"Tests table of contents with multiple levels to verify indentation is readible via helper include (deprecated).   {% include toc %}               Enim laboris id ea elit elit deserunt           2 Sit adipisicing tempor duis velit cupidatat occaecat do amet                   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor                           2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud               2.1.2 Nisi non nisi ullamco ipsum cillum               2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud                                   2.1.1.1 Ut aute quis ipsum fugiat dolor                   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam                                           2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est                       2.1.1.1.2 In consectetur ea qui quis culpa nulla                       2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est                       2.1.1.1.4 Veniam ipsum non reprehenderit pariatur                                                           2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute                   2.1.1.4 Magna ipsum nisi velit anim                                           2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud                       2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor                                                                                       2.1.4 Laboris exercitation nisi tempor dolore                                   2.2 Officia irure duis et est sunt                       3 Laborum eu magna proident proident tempor                   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu           3.2 Do exercitation ex elit incididunt sit cupidatat           3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt           3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna           3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat                           3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor                                   3.5.1.1 Nisi anim commodo consequat quis amet                                           3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident                                                                                                           3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud                       4 Laboris aute consequat id eu et Lorem amet       5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute       6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt                Enim laboris id ea elit elit deserunt   Magna incididunt elit id enim nisi quis excepteur reprehenderit Lorem dolore dolore ad enim. Labore esse elit excepteur et elit dolor. Elit ut consectetur labore velit elit esse voluptate id commodo. Magna cillum officia consequat non occaecat mollit esse nisi quis.   Nostrud veniam excepteur commodo enim pariatur velit est. Dolor consequat elit occaecat enim veniam ullamco qui est anim ex elit. Est minim aute magna laborum reprehenderit magna reprehenderit ullamco voluptate id sit aliqua. Id labore veniam ad duis aliquip commodo qui ex ut ipsum irure. In et sit ea cupidatat consectetur in nisi amet in cupidatat excepteur commodo amet.   2 Sit adipisicing tempor duis velit cupidatat occaecat do amet   Ad non dolore irure in. In do ut nostrud reprehenderit consequat aliqua sunt culpa voluptate amet minim ea. Eu dolore deserunt consectetur eu in minim sit nulla id id est amet consectetur. Tempor dolore ipsum magna amet velit aliquip ea anim non eu Lorem deserunt. Irure excepteur id adipisicing elit dolor ipsum eiusmod non nulla nisi sint qui et. Occaecat pariatur tempor ex nisi pariatur.   Proident culpa nostrud id est qui fugiat duis aute. Cillum commodo pariatur nostrud culpa Lorem exercitation non. Consequat elit deserunt dolore voluptate sunt labore minim ut consequat minim.   Sunt pariatur in ex non nulla proident ex ullamco Lorem do ipsum. Cillum est mollit reprehenderit excepteur labore labore elit dolore adipisicing ad quis quis aliqua sunt. Proident amet est reprehenderit deserunt amet cupidatat incididunt irure est elit.   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor   Nostrud sunt nostrud incididunt adipisicing officia esse minim irure duis dolore adipisicing cupidatat. Eu non labore veniam ad sunt pariatur qui. Irure reprehenderit qui elit duis cillum sit officia consectetur sint deserunt do aute velit. Do id occaecat magna occaecat reprehenderit veniam pariatur Lorem. Officia sit cupidatat adipisicing laborum.   2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud   Laborum laboris et ut proident sit qui pariatur nisi commodo. Deserunt eiusmod eiusmod elit anim exercitation quis. Anim laboris irure minim elit fugiat velit esse officia amet reprehenderit id. Dolor eiusmod incididunt excepteur sint aute qui esse nostrud. Nisi qui adipisicing consectetur enim pariatur sint veniam esse.   2.1.2 Nisi non nisi ullamco ipsum cillum  Minim officia tempor eiusmod sint magna reprehenderit do amet ex velit. Irure nulla ut veniam eu veniam proident esse pariatur cillum. Esse anim et proident cillum esse magna sint.   2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud  Reprehenderit consectetur tempor labore dolore ad. Ullamco qui sunt quis deserunt id ipsum sit qui nisi esse deserunt ad exercitation. Dolore qui in mollit ex qui minim et ipsum reprehenderit. Tempor magna ipsum proident voluptate mollit quis consectetur veniam non aliquip cupidatat nisi culpa aute.   2.1.1.1 Ut aute quis ipsum fugiat dolor  Occaecat excepteur et ea et exercitation ad aute minim incididunt incididunt aute sint officia aliquip. Quis cupidatat nostrud dolor consequat laboris eu ullamco qui esse excepteur aute. Veniam ut ipsum aute Lorem proident minim ea fugiat Lorem cillum. Qui esse id minim consequat ullamco aliqua pariatur ea mollit. Minim ea ipsum laborum consequat esse mollit pariatur. Voluptate sit voluptate non ut consectetur irure laboris ex adipisicing dolore elit aliquip velit. In eu veniam voluptate incididunt aute eu reprehenderit ut id voluptate.   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam  Magna duis exercitation dolor amet. Ea irure laborum sit officia reprehenderit enim aute magna duis. Elit fugiat ut proident sit.   2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est   Irure qui veniam incididunt irure consequat mollit consectetur est nostrud deserunt eiusmod nostrud quis. Eiusmod id proident eu aute exercitation irure consectetur sit dolor dolor in esse. Qui eu dolor ea est magna amet laborum qui irure. Reprehenderit excepteur voluptate fugiat exercitation voluptate laboris nostrud qui magna et officia.   2.1.1.1.2 In consectetur ea qui quis culpa nulla   Ad quis duis dolore voluptate laborum eiusmod consequat sint. Cupidatat officia ex laborum ad non mollit excepteur ea. Nostrud elit in consequat sunt adipisicing reprehenderit ipsum proident irure. Sint velit laborum sint laboris ea. Veniam occaecat et in Lorem proident minim deserunt labore laborum reprehenderit. Consequat laborum deserunt culpa consectetur. Incididunt reprehenderit amet esse duis dolore pariatur adipisicing quis elit.   2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est   Dolore reprehenderit aute ex id. Ipsum laboris sit quis enim labore ut sint cillum exercitation. Commodo aliqua exercitation enim sunt velit do laborum mollit irure dolor.   2.1.1.1.4 Veniam ipsum non reprehenderit pariatur   Laboris amet quis sunt id dolor consectetur Lorem id aliquip laboris fugiat. Non ex magna deserunt veniam eiusmod. Irure culpa culpa dolore pariatur. Elit enim deserunt ut amet adipisicing elit laborum exercitation cupidatat et. Aliqua aliqua laborum exercitation commodo reprehenderit reprehenderit amet laboris ea ea ex amet in. Aute minim voluptate et ipsum culpa consequat.   2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute   In in dolore laboris irure est consequat magna ea non aute cupidatat tempor. Officia sit pariatur consequat laborum aliqua nulla anim nisi aliquip reprehenderit consequat. Ad duis labore minim consequat reprehenderit labore ex minim cillum magna incididunt adipisicing dolor. Non velit mollit minim consectetur minim. Cillum elit et amet est reprehenderit non. Elit adipisicing nostrud ea veniam occaecat commodo deserunt.   2.1.1.4 Magna ipsum nisi velit anim   Eiusmod tempor dolor proident pariatur consequat sit non nostrud. Eiusmod duis elit esse Lorem dolore et minim elit consectetur eu ullamco. Adipisicing sunt excepteur eu mollit in nostrud.   2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud   Exercitation eu labore Lorem culpa id enim ut officia aute proident in est irure. Nostrud adipisicing magna elit tempor ipsum culpa in incididunt consectetur incididunt veniam aute tempor sint. Officia est consectetur sint sint nostrud proident mollit. Dolore duis proident mollit consectetur tempor.   2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor   Ad ut commodo elit amet officia ipsum labore do amet. Eiusmod sint irure magna proident nisi adipisicing mollit excepteur mollit proident culpa duis. Est reprehenderit consequat eiusmod deserunt duis ipsum esse amet incididunt.   2.1.4 Laboris exercitation nisi tempor dolore   Elit culpa est eiusmod nostrud occaecat. Labore incididunt nostrud consectetur sint. Ut pariatur laborum incididunt culpa proident incididunt veniam veniam laboris adipisicing mollit. Ullamco magna tempor fugiat veniam in ipsum nisi mollit labore amet et sit quis. In consectetur fugiat Lorem culpa veniam minim. Irure aliqua est mollit consectetur id Lorem velit minim sit velit. Eiusmod magna do dolor est id reprehenderit minim fugiat minim incididunt incididunt laboris velit consequat.   2.2 Officia irure duis et est sunt   Consequat anim quis non nulla. Eiusmod pariatur sunt non culpa culpa ipsum nulla anim in. Non ad exercitation ut reprehenderit ut dolor laborum tempor ad qui magna fugiat irure. Sint commodo ea sint sunt. Irure qui pariatur tempor veniam reprehenderit amet est. Amet laboris proident Lorem deserunt proident duis esse do sit eu dolor qui duis eu. Mollit laboris nisi aute nulla consectetur exercitation nulla aliqua anim.   3 Laborum eu magna proident proident tempor   Occaecat aliqua id voluptate mollit aliquip. Elit excepteur magna esse commodo pariatur reprehenderit in in quis. Id dolore proident proident mollit tempor duis magna ullamco nulla velit consequat. In ut est aliquip in commodo ullamco sit sint.   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu   Laborum magna deserunt do anim quis proident adipisicing. Dolore qui ex minim reprehenderit. Consectetur in cillum ad dolore ut id deserunt irure aute sint magna dolore adipisicing.   3.2 Do exercitation ex elit incididunt sit cupidatat   Excepteur aliqua nisi ullamco sunt fugiat laborum elit aliquip officia culpa. Est exercitation enim laborum amet exercitation. Eu quis qui eiusmod incididunt id do aliquip nostrud do esse enim excepteur enim pariatur. Aute adipisicing velit non culpa quis exercitation. Quis cupidatat anim occaecat Lorem ad mollit aute eiusmod quis dolor duis. Proident anim et nostrud ut aliquip irure adipisicing reprehenderit proident dolore magna. Consequat eu fugiat esse proident duis eu proident fugiat laboris ea veniam nisi reprehenderit.   3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt   Consectetur irure elit nulla elit non officia. Culpa Lorem minim dolor laboris enim labore do minim laborum. Fugiat deserunt nisi ut do incididunt incididunt ea anim exercitation sit duis. Irure esse pariatur labore enim labore qui anim culpa laborum velit consequat. Culpa in adipisicing excepteur est ipsum. In reprehenderit eiusmod ad ad non.   3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna   Nulla magna dolor minim commodo. Sunt nulla cupidatat consequat eiusmod elit irure eiusmod excepteur. Sit incididunt irure minim magna. Tempor ipsum exercitation minim sunt labore dolor ullamco veniam enim nisi veniam adipisicing occaecat proident.   3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat   Non aute culpa irure qui aute adipisicing aute id commodo id. Laborum ullamco laboris velit in quis duis ut consequat do minim. In minim amet ut reprehenderit et voluptate. In quis Lorem occaecat nostrud excepteur nostrud dolore in nulla ad Lorem nisi. Dolor exercitation Lorem qui sint aute ipsum officia eiusmod aliquip Lorem sit. Reprehenderit ex veniam excepteur laboris magna dolore fugiat sit exercitation esse et consequat in sit. Incididunt pariatur ad esse anim aute do id eu.   3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor   Est cillum laborum cupidatat ullamco cupidatat magna laborum enim duis consequat est eu. Magna cillum Lorem proident non ut officia. Esse irure et laboris eu occaecat aute.   3.5.1.1 Nisi anim commodo consequat quis amet   Sunt eu dolor enim enim consectetur et anim irure dolor velit cillum. Esse reprehenderit cillum incididunt adipisicing amet nostrud adipisicing. Minim mollit nostrud ipsum ea ut sit ex elit. Do esse ad et ipsum nisi sint anim culpa excepteur ipsum. Commodo nisi irure qui reprehenderit incididunt.   3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident   Dolore dolor sit sunt anim eu amet consectetur quis ea proident ex aliqua. Sunt laborum consectetur consectetur enim velit eiusmod labore commodo commodo laboris deserunt. Eiusmod enim do amet laborum commodo qui.   3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud   Lorem dolore sit aliqua tempor do voluptate ut esse. Minim velit ad velit commodo minim laborum. Qui qui reprehenderit non proident ullamco veniam aliquip.   4 Laboris aute consequat id eu et Lorem amet   Ad qui voluptate dolor veniam. Veniam mollit aute eiusmod eu labore incididunt sint proident. Non minim consequat anim sint. Aliquip non nisi nostrud proident. Eiusmod ut duis commodo sunt laboris irure eu. Laboris quis amet ad qui officia.   5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute   Duis proident ullamco fugiat aliqua sunt anim ea do irure est amet quis nulla cillum. Commodo voluptate dolor culpa sint aliquip voluptate exercitation anim cillum ad eu in amet. Sint fugiat qui commodo quis ex eu commodo officia aliquip irure. Non dolore elit excepteur id laboris irure consequat magna consectetur. Qui proident deserunt culpa tempor sit aute velit proident cillum ea.   6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt   Ex minim pariatur est nisi exercitation exercitation reprehenderit id aliqua deserunt est. Laborum ullamco do ipsum minim ipsum aliquip voluptate voluptate aliqua. Magna proident velit veniam et minim commodo officia officia mollit nisi. Excepteur occaecat deserunt irure adipisicing minim adipisicing cupidatat non anim exercitation ex. Amet quis sunt sint veniam non id nisi ipsum mollit voluptate quis tempor tempor.  ","categories": [],
        "tags": ["table of contents"],
        "url": "http://localhost:4000/layout-table-of-contents-include-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Nested Table of Contents",
        "excerpt":"Tests table of contents with multiple levels to verify indentation is readible.   Enim laboris id ea elit elit deserunt   Magna incididunt elit id enim nisi quis excepteur reprehenderit Lorem dolore dolore ad enim. Labore esse elit excepteur et elit dolor. Elit ut consectetur labore velit elit esse voluptate id commodo. Magna cillum officia consequat non occaecat mollit esse nisi quis.   Nostrud veniam excepteur commodo enim pariatur velit est. Dolor consequat elit occaecat enim veniam ullamco qui est anim ex elit. Est minim aute magna laborum reprehenderit magna reprehenderit ullamco voluptate id sit aliqua. Id labore veniam ad duis aliquip commodo qui ex ut ipsum irure. In et sit ea cupidatat consectetur in nisi amet in cupidatat excepteur commodo amet.   2 Sit adipisicing tempor duis velit cupidatat occaecat do amet   Ad non dolore irure in. In do ut nostrud reprehenderit consequat aliqua sunt culpa voluptate amet minim ea. Eu dolore deserunt consectetur eu in minim sit nulla id id est amet consectetur. Tempor dolore ipsum magna amet velit aliquip ea anim non eu Lorem deserunt. Irure excepteur id adipisicing elit dolor ipsum eiusmod non nulla nisi sint qui et. Occaecat pariatur tempor ex nisi pariatur.   Proident culpa nostrud id est qui fugiat duis aute. Cillum commodo pariatur nostrud culpa Lorem exercitation non. Consequat elit deserunt dolore voluptate sunt labore minim ut consequat minim.   Sunt pariatur in ex non nulla proident ex ullamco Lorem do ipsum. Cillum est mollit reprehenderit excepteur labore labore elit dolore adipisicing ad quis quis aliqua sunt. Proident amet est reprehenderit deserunt amet cupidatat incididunt irure est elit.   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor   Nostrud sunt nostrud incididunt adipisicing officia esse minim irure duis dolore adipisicing cupidatat. Eu non labore veniam ad sunt pariatur qui. Irure reprehenderit qui elit duis cillum sit officia consectetur sint deserunt do aute velit. Do id occaecat magna occaecat reprehenderit veniam pariatur Lorem. Officia sit cupidatat adipisicing laborum.   2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud   Laborum laboris et ut proident sit qui pariatur nisi commodo. Deserunt eiusmod eiusmod elit anim exercitation quis. Anim laboris irure minim elit fugiat velit esse officia amet reprehenderit id. Dolor eiusmod incididunt excepteur sint aute qui esse nostrud. Nisi qui adipisicing consectetur enim pariatur sint veniam esse.   2.1.2 Nisi non nisi ullamco ipsum cillum  Minim officia tempor eiusmod sint magna reprehenderit do amet ex velit. Irure nulla ut veniam eu veniam proident esse pariatur cillum. Esse anim et proident cillum esse magna sint.   2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud  Reprehenderit consectetur tempor labore dolore ad. Ullamco qui sunt quis deserunt id ipsum sit qui nisi esse deserunt ad exercitation. Dolore qui in mollit ex qui minim et ipsum reprehenderit. Tempor magna ipsum proident voluptate mollit quis consectetur veniam non aliquip cupidatat nisi culpa aute.   2.1.1.1 Ut aute quis ipsum fugiat dolor  Occaecat excepteur et ea et exercitation ad aute minim incididunt incididunt aute sint officia aliquip. Quis cupidatat nostrud dolor consequat laboris eu ullamco qui esse excepteur aute. Veniam ut ipsum aute Lorem proident minim ea fugiat Lorem cillum. Qui esse id minim consequat ullamco aliqua pariatur ea mollit. Minim ea ipsum laborum consequat esse mollit pariatur. Voluptate sit voluptate non ut consectetur irure laboris ex adipisicing dolore elit aliquip velit. In eu veniam voluptate incididunt aute eu reprehenderit ut id voluptate.   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam  Magna duis exercitation dolor amet. Ea irure laborum sit officia reprehenderit enim aute magna duis. Elit fugiat ut proident sit.   2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est   Irure qui veniam incididunt irure consequat mollit consectetur est nostrud deserunt eiusmod nostrud quis. Eiusmod id proident eu aute exercitation irure consectetur sit dolor dolor in esse. Qui eu dolor ea est magna amet laborum qui irure. Reprehenderit excepteur voluptate fugiat exercitation voluptate laboris nostrud qui magna et officia.   2.1.1.1.2 In consectetur ea qui quis culpa nulla   Ad quis duis dolore voluptate laborum eiusmod consequat sint. Cupidatat officia ex laborum ad non mollit excepteur ea. Nostrud elit in consequat sunt adipisicing reprehenderit ipsum proident irure. Sint velit laborum sint laboris ea. Veniam occaecat et in Lorem proident minim deserunt labore laborum reprehenderit. Consequat laborum deserunt culpa consectetur. Incididunt reprehenderit amet esse duis dolore pariatur adipisicing quis elit.   2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est   Dolore reprehenderit aute ex id. Ipsum laboris sit quis enim labore ut sint cillum exercitation. Commodo aliqua exercitation enim sunt velit do laborum mollit irure dolor.   2.1.1.1.4 Veniam ipsum non reprehenderit pariatur   Laboris amet quis sunt id dolor consectetur Lorem id aliquip laboris fugiat. Non ex magna deserunt veniam eiusmod. Irure culpa culpa dolore pariatur. Elit enim deserunt ut amet adipisicing elit laborum exercitation cupidatat et. Aliqua aliqua laborum exercitation commodo reprehenderit reprehenderit amet laboris ea ea ex amet in. Aute minim voluptate et ipsum culpa consequat.   2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute   In in dolore laboris irure est consequat magna ea non aute cupidatat tempor. Officia sit pariatur consequat laborum aliqua nulla anim nisi aliquip reprehenderit consequat. Ad duis labore minim consequat reprehenderit labore ex minim cillum magna incididunt adipisicing dolor. Non velit mollit minim consectetur minim. Cillum elit et amet est reprehenderit non. Elit adipisicing nostrud ea veniam occaecat commodo deserunt.   2.1.1.4 Magna ipsum nisi velit anim   Eiusmod tempor dolor proident pariatur consequat sit non nostrud. Eiusmod duis elit esse Lorem dolore et minim elit consectetur eu ullamco. Adipisicing sunt excepteur eu mollit in nostrud.   2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud   Exercitation eu labore Lorem culpa id enim ut officia aute proident in est irure. Nostrud adipisicing magna elit tempor ipsum culpa in incididunt consectetur incididunt veniam aute tempor sint. Officia est consectetur sint sint nostrud proident mollit. Dolore duis proident mollit consectetur tempor.   2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor   Ad ut commodo elit amet officia ipsum labore do amet. Eiusmod sint irure magna proident nisi adipisicing mollit excepteur mollit proident culpa duis. Est reprehenderit consequat eiusmod deserunt duis ipsum esse amet incididunt.   2.1.4 Laboris exercitation nisi tempor dolore   Elit culpa est eiusmod nostrud occaecat. Labore incididunt nostrud consectetur sint. Ut pariatur laborum incididunt culpa proident incididunt veniam veniam laboris adipisicing mollit. Ullamco magna tempor fugiat veniam in ipsum nisi mollit labore amet et sit quis. In consectetur fugiat Lorem culpa veniam minim. Irure aliqua est mollit consectetur id Lorem velit minim sit velit. Eiusmod magna do dolor est id reprehenderit minim fugiat minim incididunt incididunt laboris velit consequat.   2.2 Officia irure duis et est sunt   Consequat anim quis non nulla. Eiusmod pariatur sunt non culpa culpa ipsum nulla anim in. Non ad exercitation ut reprehenderit ut dolor laborum tempor ad qui magna fugiat irure. Sint commodo ea sint sunt. Irure qui pariatur tempor veniam reprehenderit amet est. Amet laboris proident Lorem deserunt proident duis esse do sit eu dolor qui duis eu. Mollit laboris nisi aute nulla consectetur exercitation nulla aliqua anim.   3 Laborum eu magna proident proident tempor   Occaecat aliqua id voluptate mollit aliquip. Elit excepteur magna esse commodo pariatur reprehenderit in in quis. Id dolore proident proident mollit tempor duis magna ullamco nulla velit consequat. In ut est aliquip in commodo ullamco sit sint.   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu   Laborum magna deserunt do anim quis proident adipisicing. Dolore qui ex minim reprehenderit. Consectetur in cillum ad dolore ut id deserunt irure aute sint magna dolore adipisicing.   3.2 Do exercitation ex elit incididunt sit cupidatat   Excepteur aliqua nisi ullamco sunt fugiat laborum elit aliquip officia culpa. Est exercitation enim laborum amet exercitation. Eu quis qui eiusmod incididunt id do aliquip nostrud do esse enim excepteur enim pariatur. Aute adipisicing velit non culpa quis exercitation. Quis cupidatat anim occaecat Lorem ad mollit aute eiusmod quis dolor duis. Proident anim et nostrud ut aliquip irure adipisicing reprehenderit proident dolore magna. Consequat eu fugiat esse proident duis eu proident fugiat laboris ea veniam nisi reprehenderit.   3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt   Consectetur irure elit nulla elit non officia. Culpa Lorem minim dolor laboris enim labore do minim laborum. Fugiat deserunt nisi ut do incididunt incididunt ea anim exercitation sit duis. Irure esse pariatur labore enim labore qui anim culpa laborum velit consequat. Culpa in adipisicing excepteur est ipsum. In reprehenderit eiusmod ad ad non.   3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna   Nulla magna dolor minim commodo. Sunt nulla cupidatat consequat eiusmod elit irure eiusmod excepteur. Sit incididunt irure minim magna. Tempor ipsum exercitation minim sunt labore dolor ullamco veniam enim nisi veniam adipisicing occaecat proident.   3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat   Non aute culpa irure qui aute adipisicing aute id commodo id. Laborum ullamco laboris velit in quis duis ut consequat do minim. In minim amet ut reprehenderit et voluptate. In quis Lorem occaecat nostrud excepteur nostrud dolore in nulla ad Lorem nisi. Dolor exercitation Lorem qui sint aute ipsum officia eiusmod aliquip Lorem sit. Reprehenderit ex veniam excepteur laboris magna dolore fugiat sit exercitation esse et consequat in sit. Incididunt pariatur ad esse anim aute do id eu.   3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor   Est cillum laborum cupidatat ullamco cupidatat magna laborum enim duis consequat est eu. Magna cillum Lorem proident non ut officia. Esse irure et laboris eu occaecat aute.   3.5.1.1 Nisi anim commodo consequat quis amet   Sunt eu dolor enim enim consectetur et anim irure dolor velit cillum. Esse reprehenderit cillum incididunt adipisicing amet nostrud adipisicing. Minim mollit nostrud ipsum ea ut sit ex elit. Do esse ad et ipsum nisi sint anim culpa excepteur ipsum. Commodo nisi irure qui reprehenderit incididunt.   3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident   Dolore dolor sit sunt anim eu amet consectetur quis ea proident ex aliqua. Sunt laborum consectetur consectetur enim velit eiusmod labore commodo commodo laboris deserunt. Eiusmod enim do amet laborum commodo qui.   3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud   Lorem dolore sit aliqua tempor do voluptate ut esse. Minim velit ad velit commodo minim laborum. Qui qui reprehenderit non proident ullamco veniam aliquip.   4 Laboris aute consequat id eu et Lorem amet   Ad qui voluptate dolor veniam. Veniam mollit aute eiusmod eu labore incididunt sint proident. Non minim consequat anim sint. Aliquip non nisi nostrud proident. Eiusmod ut duis commodo sunt laboris irure eu. Laboris quis amet ad qui officia.   5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute   Duis proident ullamco fugiat aliqua sunt anim ea do irure est amet quis nulla cillum. Commodo voluptate dolor culpa sint aliquip voluptate exercitation anim cillum ad eu in amet. Sint fugiat qui commodo quis ex eu commodo officia aliquip irure. Non dolore elit excepteur id laboris irure consequat magna consectetur. Qui proident deserunt culpa tempor sit aute velit proident cillum ea.   6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt   Ex minim pariatur est nisi exercitation exercitation reprehenderit id aliqua deserunt est. Laborum ullamco do ipsum minim ipsum aliquip voluptate voluptate aliqua. Magna proident velit veniam et minim commodo officia officia mollit nisi. Excepteur occaecat deserunt irure adipisicing minim adipisicing cupidatat non anim exercitation ex. Amet quis sunt sint veniam non id nisi ipsum mollit voluptate quis tempor tempor.  ","categories": [],
        "tags": ["table of contents"],
        "url": "http://localhost:4000/layout-table-of-contents-indent-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Table of Contents",
        "excerpt":"Enable table of contents on post or page by adding toc: true to its YAML Front Matter. The title and icon can also be changed with:   --- toc: true toc_label: \"Unique Title\" toc_icon: \"heart\"  # corresponding Font Awesome icon name (without fa prefix) ---   HTML Elements   Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.   Body text   Lorem ipsum dolor sit amet, test link adipiscing elit. This is strong. Nullam dignissim convallis est. Quisque aliquam.      This is emphasized. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.   HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.   Blockquotes      Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.    List Types   Ordered Lists      Item one            sub item one       sub item two       sub item three           Item two   Unordered Lists      Item one   Item two   Item three   Tables                  Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Code Snippets   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn btn--success\"&gt;Success Button&lt;/a&gt;   Primary Button Success Button Warning Button Danger Button Info Button  Notices   Watch out! You can also add notices by appending {: .notice} to a paragraph.  ","categories": [],
        "tags": ["table of contents"],
        "url": "http://localhost:4000/layout-table-of-contents-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Sticky Table of Contents",
        "excerpt":"“Stick” table of contents to the top of a page by adding toc_sticky: true to its YAML Front Matter.   --- toc: true toc_sticky: true ---   HTML Elements   Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.   Body text   Lorem ipsum dolor sit amet, test link adipiscing elit. This is strong. Nullam dignissim convallis est. Quisque aliquam.      This is emphasized. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.   HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.   Blockquotes      Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.    List Types   Ordered Lists      Item one            sub item one       sub item two       sub item three           Item two   Unordered Lists      Item one   Item two   Item three   Tables                  Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Code Snippets   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn btn--success\"&gt;Success Button&lt;/a&gt;   Primary Button Success Button Warning Button Danger Button Info Button  Notices   Watch out! You can also add notices by appending {: .notice} to a paragraph.  ","categories": [],
        "tags": ["table of contents"],
        "url": "http://localhost:4000/layout-table-of-contents-sticky/",
        "teaser": null
      },{
        "title": "Layout: Code Excerpt (Generated)",
        "excerpt":"This is the post content with inline code, (e.g. &lt;span style=\"color: red;\"&gt;red&lt;/span&gt;. It should be displayed in place of the auto-generated excerpt in single-page views. Archive-index pages should display an auto-generated excerpt of this content.   Be sure to test the formatting of the auto-generated excerpt, to ensure that it doesn’t create any layout problems.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-code-excerpt-generated/",
        "teaser": null
      },{
        "title": "Layout: Excerpt (Defined)",
        "excerpt":"This is the post content. It should be displayed in place of the user-defined excerpt in archive-index pages.   This paragraph should be absent from an archive-index page where post.excerpt is shown.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-excerpt-defined/",
        "teaser": null
      },{
        "title": "Layout: Excerpt (Generated)",
        "excerpt":"This is the post content. Archive-index pages should display an auto-generated excerpt of this content.     Be sure to test the formatting of the auto-generated excerpt, to ensure that it doesn’t create any layout problems.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-excerpt-generated/",
        "teaser": null
      },{
        "title": "Layout: Author Override",
        "excerpt":"Sites that may have content authored from various individuals can be accommodated by using data files.   To attribute an author to a post or page that is different from the site author specified in _config.yml:   Step 1. Create _data/authors.yml and add authors using the following format. Anything variables found under author in _config.yml can be used (e.g. name, bio, avatar, author links, etc.).   # /_data/authors.yml  Billy Rick:   name        : \"Billy Rick\"   bio         : \"What do you want, jewels? I am a very extravagant man.\"   avatar      : \"/assets/images/bio-photo-2.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:billyrick@rick.com\"     - label: \"Website\"       icon: \"fas fa-fw fa-link\"       url: \"https://thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/extravagantman\"  Cornelius Fiddlebone:   name        : \"Cornelius Fiddlebone\"   bio         : \"I ordered what?\"   avatar      : \"/assets/images/bio-photo.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:cornelius@thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/rhymeswithsackit\"   Step 2. Assign one of the authors in authors.yml to a post or page you wish to override the site.author with.   Example: To assign Billy Rick as an author for a post the following YAML Front Matter would be applied:   author: Billy Rick  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/layout-author-override/",
        "teaser": null
      },{
        "title": "Layout: Author Sidebar Disabled",
        "excerpt":"This post has the author sidebar disabled.   To disable add author_profile: false to YAML Front Matter.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/layout-author-sidebar-disabled/",
        "teaser": null
      },{
        "title": "Layout: Header Image (External URL)",
        "excerpt":"This post should display a header image, if the theme supports it.   Featured image is an external asset and should load.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-image-external/",
        "teaser": null
      },{
        "title": "Layout: Header Image (Horizontal)",
        "excerpt":"This post should display a header image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests a horizontal header image.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-image-horizontal/",
        "teaser": null
      },{
        "title": "Layout: Header Image and Text Readability",
        "excerpt":"This is a sample post with a large feature image1 up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.                  Texture image courtesty of Lovetextures &#8617;           ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "http://localhost:4000/layout-header-image-text-readability/",
        "teaser": null
      },{
        "title": "Layout: Header Image (Vertical)",
        "excerpt":"This post should display a header image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests a vertical header image.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-image-vertical/",
        "teaser": null
      },{
        "title": "Layout: Header Overlay with Background Fill",
        "excerpt":"This post should display a header with a solid background color, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay headers.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-overlay-color/",
        "teaser": null
      },{
        "title": "Layout: Header Image Overlay with Custom Tagline",
        "excerpt":"This post should display a header with an overlay image and custom tagline, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay header images with custom page.tagline.   tagline: \"This is a custom tagline content which overrides the default page excerpt.\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-overlay-image-tagline/",
        "teaser": null
      },{
        "title": "Layout: Header Image Overlay",
        "excerpt":"This post should display a header with an overlay image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay header images.   Overlay filter   You can use it by specifying the opacity (between 0 and 1) of a black overlay like so:      excerpt: \"This post should [...]\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   overlay_filter: 0.5 # same as adding an opacity of 0.5 to a black background   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"More Info\"       url: \"https://unsplash.com\"   Or if you want to do more fancy things, go full rgba:      excerpt: \"This post should [...]\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   overlay_filter: rgba(255, 0, 0, 0.5)   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"More Info\"       url: \"https://unsplash.com\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-overlay-image/",
        "teaser": null
      },{
        "title": "Layout: More Tag",
        "excerpt":"This content is before the excerpt separator tag.   Additional content before the more tag.     And this content is after the more tag.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","read more","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-more-tag/",
        "teaser": null
      },{
        "title": "Layout: Sidebar Custom",
        "excerpt":"This post has a custom sidebar set in the post’s YAML Front Matter.   An example of how that YAML could look is:   sidebar:   - title: \"Title\"     image: http://placehold.it/350x250     image_alt: \"image\"     text: \"Some text here.\"   - title: \"Another Title\"     text: \"More text here.\"     nav: sidebar-sample  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/layout-sidebar-custom/",
        "teaser": null
      },{
        "title": "Layout: Sidebar with Navigation List",
        "excerpt":"This post has a custom navigation list set in the post’s YAML Front Matter.   sidebar:   title: \"Sample Title\"   nav: sidebar-sample   Along with navigation elements set in _data/navigation.yml.   sidebar-sample:   - title: \"Parent Page A\"     children:       - title: \"Child Page A1\"         url: /       - title: \"Child Page A2\"         url: /       - title: \"Child Page A3\"         url: /       - title: \"Child Page A4\"         url: /   - title: \"Parent Page B\"     children:       - title: \"Child Page B1\"         url: /       - title: \"Child Page B2\"         url: /       - title: \"Child Page B3\"         url: /       - title: \"Child Page B4\"         url: /       - title: \"Child Page B5\"         url: /   - title: \"Parent Page C\"     children:       - title: \"Child Page C1\"         url: /       - title: \"Child Page C2\"         url: /       - title: \"Child Page C3\"         url: /       - title: \"Child Page C4\"         url: /       - title: \"Child Page C5\"         url: /   - title: \"Parent Page D\"     children:       - title: \"Child Page D1\"         url: /       - title: \"Child Page D2\"         url: /  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/layout-sidebar-nav-list/",
        "teaser": null
      },{
        "title": "Wide Single Layout Page",
        "excerpt":"When using layout: single add the following front matter to a page or post to widen the main content:   classes: wide   Portland in shoreditch Vice, labore typewriter pariatur hoodie fap sartorial Austin. Pinterest literally occupy Schlitz forage. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.  ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "http://localhost:4000/markup-text-readability-wide-page/",
        "teaser": null
      },{
        "title": "Markup: Text Readability Test",
        "excerpt":"Portland in shoreditch Vice, labore typewriter pariatur hoodie fap sartorial Austin. Pinterest literally occupy Schlitz forage. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.  ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "http://localhost:4000/markup-text-readability/",
        "teaser": null
      },{
        "title": "Markup: Title *with* **Markdown**",
        "excerpt":"Verify that:      The post title renders the word “with” in italics and the word “Markdown” in bold.   The post title markup should be removed from the browser window / tab.  ","categories": ["Markdown"],
        "tags": ["css","html","title"],
        "url": "http://localhost:4000/markdown/markup-title-with-markup/",
        "teaser": null
      },{
        "title": "Markup: Title with Special&nbsp;---&nbsp;Characters",
        "excerpt":"Putting special characters in the title should have no adverse effect on the layout or functionality.   Special characters in the post title have been known to cause issues with JavaScript and XML when not properly encoded and escaped.   Latin Character Tests   This is a test to see if the fonts used in this theme support basic Latin characters.                  !                      &#8220;                      #                      $                      %                      &amp;                      &#8216;                      (                      )                      *                          +                      ,                      &#8211;                      .                      /                                     1                      2                      3                      4                          5                      6                      7                      8                      9                      :                      ;                      &gt;                      =                      &lt;                          ?                      @                      A                      B                      C                      D                      E                      F                      G                      H                          I                      J                      K                      L                      M                      N                      O                      P                      Q                      R                          S                      T                      U                      V                      W                      X                      Y                      Z                      [                                         ]                      ^                      _                      `                      a                      b                      c                      d                      e                      f                          g                      h                      i                      j                      k                      l                      m                      n                      o                      p                          q                      r                      s                      t                      u                      v                      w                      x                      y                      z                          {                      |                      }                      ~                                                                                                    ","categories": ["Markup"],
        "tags": ["html","markup","post","title"],
        "url": "http://localhost:4000/markup/markup-title-with-special-characters/",
        "teaser": null
      },{
        "title": "Markup: Text Alignment",
        "excerpt":"Default   This is a paragraph. It should not have any alignment of any kind. It should just flow like you would normally expect. Nothing fancy. Just straight up text, free flowing, with love. Completely neutral and not picking a side or sitting on the fence. It just is. It just freaking is. It likes where it is. It does not feel compelled to pick a side. Leave him be. It will just be better that way. Trust me.   Left Align   This is a paragraph. It is left aligned. Because of this, it is a bit more liberal in it’s views. It’s favorite color is green. Left align tends to be more eco-friendly, but it provides no concrete evidence that it really is. Even though it likes share the wealth evenly, it leaves the equal distribution up to justified alignment.   Center Align   This is a paragraph. It is center aligned. Center is, but nature, a fence sitter. A flip flopper. It has a difficult time making up its mind. It wants to pick a side. Really, it does. It has the best intentions, but it tends to complicate matters more than help. The best you can do is try to win it over and hope for the best. I hear center align does take bribes.   Right Align   This is a paragraph. It is right aligned. It is a bit more conservative in it’s views. It’s prefers to not be told what to do or how to do it. Right align totally owns a slew of guns and loves to head to the range for some practice. Which is cool and all. I mean, it’s a pretty good shot from at least four or five football fields away. Dead on. So boss.   Justify Align   This is a paragraph. It is justify aligned. It gets really mad when people associate it with Justin Timberlake. Typically, justified is pretty straight laced. It likes everything to be in it’s place and not all cattywampus like the rest of the aligns. I am not saying that makes it better than the rest of the aligns, but it does tend to put off more of an elitist attitude.  ","categories": ["Markup"],
        "tags": ["alignment","content","css","markup"],
        "url": "http://localhost:4000/markup/markup-text-alignment/",
        "teaser": null
      },{
        "title": "Markup: Image Alignment",
        "excerpt":"Welcome to image alignment! The best way to demonstrate the ebb and flow of the various image positioning options is to nestle them snuggly among an ocean of words. Grab a paddle and let’s get started.      The image above happens to be centered.    The rest of this paragraph is filler for the sake of seeing the text wrap around the 150×150 image, which is left aligned.   As you can see there should be some space above, below, and to the right of the image. The text should not be creeping on the image. Creeping is just not right. Images need breathing room too. Let them speak like you words. Let them do their jobs without any hassle from the text. In about one more sentence here, we’ll see that the text moves from the right of the image down below the image in seamless transition. Again, letting the do it’s thing. Mission accomplished!   And now for a massively large image. It also has no alignment.      The image above, though 1200px wide, should not overflow the content area. It should remain contained with no visible disruption to the flow of content.      And now we’re going to shift things to the right align. Again, there should be plenty of room above, below, and to the left of the image. Just look at him there — Hey guy! Way to rock that right side. I don’t care what the left aligned image says, you look great. Don’t let anyone else tell you differently.   In just a bit here, you should see the text start to wrap below the right aligned image and settle in nicely. There should still be plenty of room and everything should be sitting pretty. Yeah — Just like that. It never felt so good to be right.   And just when you thought we were done, we’re going to do them all over again with captions!         Look at 580 x 300 getting some love.   The figure above happens to be centered. The caption also has a link in it, just to see if it does anything funky.         Itty-bitty caption.   The rest of this paragraph is filler for the sake of seeing the text wrap around the 150×150 image, which is left aligned.   As you can see there should be some space above, below, and to the right of the image. The text should not be creeping on the image. Creeping is just not right. Images need breathing room too. Let them speak like you words. Let them do their jobs without any hassle from the text. In about one more sentence here, we’ll see that the text moves from the right of the image down below the image in seamless transition. Again, letting the do it’s thing. Mission accomplished!   And now for a massively large image. It also has no alignment.         Massive image comment for your eyeballs.   The figure element above has an inline style of width: 1200px set which should break it outside of the normal content flow.         Feels good to be right all the time.   And now we’re going to shift things to the right align. Again, there should be plenty of room above, below, and to the left of the image. Just look at him there — Hey guy! Way to rock that right side. I don’t care what the left aligned image says, you look great. Don’t let anyone else tell you differently.   In just a bit here, you should see the text start to wrap below the right aligned image and settle in nicely. There should still be plenty of room and everything should be sitting pretty. Yeah — Just like that. It never felt so good to be right.   And that’s a wrap, yo! You survived the tumultuous waters of alignment. Image alignment achievement unlocked!  ","categories": ["Markup"],
        "tags": ["alignment","captions","content","css","image","markup"],
        "url": "http://localhost:4000/markup/markup-image-alignment/",
        "teaser": null
      },{
        "title": "Markup: HTML Tags and Formatting",
        "excerpt":"A variety of common markup showing how the theme styles them.   Header two   Header three   Header four   Header five   Header six   Blockquotes   Single line blockquote:      Stay hungry. Stay foolish.    Multi line blockquote with a cite reference:      People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done. Innovation is saying no to 1,000 things.    Steve Jobs — Apple Worldwide Developers’ Conference, 1997   Tables                  Employee       Salary                               John Doe       $1       Because that’s all Steve Jobs needed for a salary.                 Jane Doe       $100K       For all the blogging she does.                 Fred Bloggs       $100M       Pictures are worth a thousand words, right? So Jane × 1,000.                 Jane Bloggs       $100B       With hair like that?! Enough said.                          Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Definition Lists      Definition List Title   Definition list division.   Startup   A startup company or startup is a company or temporary organization designed to search for a repeatable and scalable business model.   #dowork   Coined by Rob Dyrdek and his personal body guard Christopher “Big Black” Boykins, “Do Work” works as a self motivator, to motivating your friends.   Do It Live   I’ll let Bill O’Reilly explain this one.   Unordered Lists (Nested)      List item one            List item one                    List item one           List item two           List item three           List item four                       List item two       List item three       List item four           List item two   List item three   List item four   Ordered List (Nested)      List item one            List item one                    List item one           List item two           List item three           List item four                       List item two       List item three       List item four           List item two   List item three   List item four   Forms           Personalia:     Name:       Email:       Date of birth:       Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn--success\"&gt;Success Button&lt;/a&gt;   Default Button Primary Button Success Button Warning Button Danger Button Info Button Inverse Button Light Outline Button   [Default Button Text](#link){: .btn} [Primary Button Text](#link){: .btn .btn--primary} [Success Button Text](#link){: .btn .btn--success} [Warning Button Text](#link){: .btn .btn--warning} [Danger Button Text](#link){: .btn .btn--danger} [Info Button Text](#link){: .btn .btn--info} [Inverse Button](#link){: .btn .btn--inverse} [Light Outline Button](#link){: .btn .btn--light-outline}   X-Large Button Large Button Default Button Small Button   [X-Large Button](#link){: .btn .btn--primary .btn--x-large} [Large Button](#link){: .btn .btn--primary .btn--large} [Default Button](#link){: .btn .btn--primary } [Small Button](#link){: .btn .btn--primary .btn--small}   Notices   Watch out! This paragraph of text has been emphasized with the {: .notice} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--primary} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--info} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--warning} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--success} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--danger} class.   HTML Tags   Address Tag      1 Infinite Loop  Cupertino, CA 95014  United States   Anchor Tag (aka. Link)   This is an example of a link.   Abbreviation Tag   The abbreviation CSS stands for “Cascading Style Sheets”.   Cite Tag   “Code is poetry.” —Automattic   Code Tag   You will learn later on in these tests that word-wrap: break-word; will be your best friend.   Strike Tag   This tag will let you strikeout text.   Emphasize Tag   The emphasize tag should italicize text.   Insert Tag   This tag should denote inserted text.   Keyboard Tag   This scarcely known tag emulates keyboard text, which is usually styled like the &lt;code&gt; tag.   Preformatted Tag   This tag styles large blocks of code.    .post-title { \tmargin: 0 0 5px; \tfont-weight: bold; \tfont-size: 38px; \tline-height: 1.2; \tand here's a line of some really, really, really, really long text, just to see how the PRE tag handles it and to find out how it overflows; }   Quote Tag   Developers, developers, developers… –Steve Ballmer   Strong Tag   This tag shows bold text.   Subscript Tag   Getting our science styling on with H2O, which should push the “2” down.   Superscript Tag   Still sticking with science and Albert Einstein’s E = MC2, which should lift the 2 up.   Variable Tag   This allows you to denote variables.  ","categories": ["Markup"],
        "tags": ["content","css","formatting","html","markup"],
        "url": "http://localhost:4000/markup/markup-html-tags-and-formatting/",
        "teaser": "http://localhost:4000/assets/images/markup-syntax-highlighting-teaser.jpg"
      },{
        "title": "Markup: Another Post with Images",
        "excerpt":"Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use figure with the appropriate class. Each instance of figure is auto-numbered and displayed in the caption.   Figures (for images or video)   One Up    \t \tMorning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Two Up   Apply the half class like so to display two images side by side that share the same caption.   &lt;figure class=\"half\"&gt;     &lt;a href=\"/assets/images/image-filename-1-large.jpg\"&gt;&lt;img src=\"/assets/images/image-filename-1.jpg\"&gt;&lt;/a&gt;     &lt;a href=\"/assets/images/image-filename-2-large.jpg\"&gt;&lt;img src=\"/assets/images/image-filename-2.jpg\"&gt;&lt;/a&gt;     &lt;figcaption&gt;Caption describing these two images.&lt;/figcaption&gt; &lt;/figure&gt;   And you’ll get something that looks like this:    \t \t \tTwo images.   Three Up   Apply the third class like so to display three images side by side that share the same caption.   &lt;figure class=\"third\"&gt; \t&lt;img src=\"/images/image-filename-1.jpg\"&gt; \t&lt;img src=\"/images/image-filename-2.jpg\"&gt; \t&lt;img src=\"/images/image-filename-3.jpg\"&gt; \t&lt;figcaption&gt;Caption describing these three images.&lt;/figcaption&gt; &lt;/figure&gt;   And you’ll get something that looks like this:    \t \t \t \tThree images.  ","categories": [],
        "tags": ["sample post","images","test"],
        "url": "http://localhost:4000/markup-more-images/",
        "teaser": "http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg"
      },{
        "title": "Markup: Syntax Highlighting",
        "excerpt":"Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.1   GFM Code Blocks   GitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   .highlight {   margin: 0;   padding: 1em;   font-family: $monospace;   font-size: $type-size-7;   line-height: 1.8; }  &lt;nav class=\"pagination\" role=\"navigation\"&gt;   {% if page.previous %}     &lt;a href=\"{{ site.url }}{{ page.previous.url }}\" class=\"btn\" title=\"{{ page.previous.title }}\"&gt;Previous article&lt;/a&gt;   {% endif %}   {% if page.next %}     &lt;a href=\"{{ site.url }}{{ page.next.url }}\" class=\"btn\" title=\"{{ page.next.title }}\"&gt;Next article&lt;/a&gt;   {% endif %} &lt;/nav&gt;&lt;!-- /.pagination --&gt;   module Jekyll   class TagIndex &lt; Page     def initialize(site, base, dir, tag)       @site = site       @base = base       @dir = dir       @name = 'index.html'       self.process(@name)       self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')       self.data['tag'] = tag       tag_title_prefix = site.config['tag_title_prefix'] || 'Tagged: '       tag_title_suffix = site.config['tag_title_suffix'] || '&amp;#8211;'       self.data['title'] = \"#{tag_title_prefix}#{tag}\"       self.data['description'] = \"An archive of posts tagged #{tag}.\"     end   end end   Code Blocks in Lists   Indentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4.      Do step 1.        Now do this:       def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.           Now you can do this.   Jekyll Highlight Tag   An example of a code blocking using Jekyll’s {% highlight %} tag.   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 'gulp html' -- does nothing // 'gulp html --prod' -- minifies and gzips HTML files for production gulp.task('html', () =&gt; {   return gulp.src(paths.siteFolderName + paths.htmlPattern)     .pipe(when(argv.prod, htmlmin({       removeComments: true,       collapseWhitespace: true,       collapseBooleanAttributes: false,       removeAttributeQuotes: false,       removeRedundantAttributes: false,       minifyJS: true,       minifyCSS: true     })))     .pipe(when(argv.prod, size({title: 'optimized HTML'})))     .pipe(when(argv.prod, gulp.dest(paths.siteFolderName)))     .pipe(when(argv.prod, gzip({append: true})))     .pipe(when(argv.prod, size({       title: 'gzipped HTML',       gzip: true     })))     .pipe(when(argv.prod, gulp.dest(paths.siteFolderName))) });   1 2 3 4 Module[{},   Sqrt[2]   4 ]   GitHub Gist Embed   An example of a Gist embed below.                    http://en.wikipedia.org/wiki/Syntax_highlighting &#8617;           ","categories": [],
        "tags": ["code","syntax highlighting"],
        "url": "http://localhost:4000/markup-syntax-highlighting/",
        "teaser": "http://localhost:4000/assets/images/markup-syntax-highlighting-teaser.jpg"
      },{
        "title": "Welcome to Jekyll!",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.   Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "http://localhost:4000/jekyll/welcome-to-jekyll/",
        "teaser": "http://localhost:4000/assets/images/500x300.png"
      },{
        "title": "Gemified Theme -- Alpha Release",
        "excerpt":"Jekyll themes distributed as Ruby gems are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to “install it”. Or dealing with merge conflicts when pulling in upstream commits to “upgrade it”.   If you’re interested in testing out Minimal Mistakes as a gemified theme read on. There are a few caveats though:      Support for a theme assets folder was recently added to Jekyll core, but has yet to be released or rolled into the github-pages gem. Meaning you can’t use Minimal Mistakes as a Ruby gem there just yet… locally served or self-hosted installs should be fine if you don’t mind using a pre-release version of Jekyll.   Windows users can’t currently use themes packaged as gems due to a bug with file paths in Jekyll core. This is being worked on so hopefully a fix is on the way soon.   Fine with all that? Great. Let’s continue.   If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the _includes, _layouts, _sass partials, or assets this should be quick and painless.   Step 1: Remove Theme Files   Remove _includes, _layouts, _sass, assets folders and files within. You won’t need these anymore as they’re bundled in the theme.   If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as overrides to the versions bundled with the theme.   Step 2: Update Gemfile   In order to test you’ll need to install pre-release gems of Jekyll and Minimal Mistakes.   Start by replacing gem \"github-pages\" or gem \"jekyll\" with the following:   gem \"jekyll\", :git =&gt; \"https://github.com/jekyll/jekyll.git\"   Then add the pre-release Minimal Mistakes theme gem:   gem \"minimal-mistakes-jekyll\", :git =&gt; \"https://github.com/mmistakes/minimal-mistakes.git\", :branch =&gt; \"feature/theme-gem\"`   When finished your Gemfile should look something like this:   source \"https://rubygems.org\"  gem \"jekyll\", :git =&gt; \"https://github.com/jekyll/jekyll.git\" gem \"minimal-mistakes-jekyll\", :git =&gt; \"https://github.com/mmistakes/minimal-mistakes.git\", :branch =&gt; \"feature/theme-gem\"  group :jekyll_plugins do   # gem \"jekyll-archives\"   gem \"jekyll-paginate\"   gem \"jekyll-sitemap\"   gem \"jekyll-gist\"   gem \"jekyll-feed\" end   Step 3: Run Bundler   Run bundle install (or bundle update if you’re updating an existing repo) to install the pre-release gems.   Step 4: Install the Theme   Add theme: \"minimal-mistakes-jekyll\" to your _config.yml file.   If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to properly config.   Please Note: Paths for image headers, overlays, teasers, galleries, and feature rows have changed and now require a full path. Instead of just image: filename.jpg you’ll need to use the full path eg: image: assets/images/filename.jpg. The preferred location is now assets/images but can be placed elsewhere or external hosted. This applies for image references in _config.yml and author.yml.   Step 5: jekyll new Tweaks   If this is a new site be sure to add the following files to _data/ and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.      _data/ui-text.yml - UI text documentation   _data/navigation.yml - navigation documentation   You’ll also need to:      Replace &lt;site root&gt;/index.html with a modified Minimal Mistakes index.html.   Change layout: post in _posts/0000-00-00-welcome-to-jekyll.markdown to layout: single.   Remove about.md, or at the very least change layout: page to layout: single and remove references to icon-github.html (or copy to your _includes if using).     That’s it! If all goes well running bundle exec jekyll serve should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.   File an issue   Thanks!  ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "http://localhost:4000/jekyll/gemified-theme-alpha/",
        "teaser": null
      },{
        "title": "Gemified Theme -- Beta Release",
        "excerpt":"Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes… as a gemified theme.   minimal-mistakes-jekyll can only be used with Jekyll proper. If you’re hosting on GitHub Pages or using that gem the theme won’t work. 3rd party themes haven’t been white-listed so it’s a no go for now.   Fine with all that? Great. Let’s continue.   If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the _includes, _layouts, _sass partials, or assets this should be quick and painless.   Step 1: Remove Theme Files   Remove _includes, _layouts, _sass, assets folders and files within. You won’t need these anymore as they’re bundled in the theme.   If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as overrides to the versions bundled with the theme.   Step 2: Update Gemfile   Replace gem \"github-pages or gem \"jekyll\" with gem \"jekyll\", \"~&gt; 3.3.0\". You’ll need the latest version of Jekyll1 for Minimal Mistakes to work and load all of the /assets/ properly.   Add the Minimal Mistakes theme gem:   gem \"minimal-mistakes-jekyll\"   When finished your Gemfile should look something like this:   source \"https://rubygems.org\"  gem \"jekyll\", \"~&gt; 3.3.0\" gem \"minimal-mistakes-jekyll\"   Step 3: Run Bundler   Run bundle install (or bundle update if you’re updating an existing repo) to install/update Jekyll and the theme.   Step 4: Install the Theme   Add theme: \"minimal-mistakes-jekyll\" to your _config.yml file.   If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to properly config.   Please Note: Paths for image headers, overlays, teasers, galleries, and feature rows have changed and now require a full path. Instead of just image: filename.jpg you’ll need to use the full path eg: image: assets/images/filename.jpg. The preferred location is now assets/images but can be placed elsewhere or external hosted. This all applies for image references in _config.yml and author.yml as well.   Step 5: jekyll new Tweaks   If this is a new site be sure to add the following files to _data/ and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.      _data/ui-text.yml - UI text documentation   _data/navigation.yml - navigation documentation   You’ll also need to:      Replace &lt;site root&gt;/index.html with a modified Minimal Mistakes index.html.   Change layout: post in _posts/0000-00-00-welcome-to-jekyll.markdown to layout: single.   Remove about.md, or at the very least change layout: page to layout: single and remove references to icon-github.html (or copy to your _includes if using).     That’s it! If all goes well running bundle exec jekyll serve should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.   File an issue   Thanks!                 You could also run bundle update jekyll to update Jekyll. &#8617;           ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "http://localhost:4000/jekyll/gemified-theme-beta/",
        "teaser": null
      },{
        "title": "Layout: Header Video",
        "excerpt":"This post should display a header with a responsive video, if the theme supports it.   Settings                  Parameter       Required       Description                       id       Required       ID of the video                 provider       Required       Hosting provider of the video, either youtube or vimeo           YouTube   To embed the following YouTube video at url https://www.youtube.com/watch?v=XsxDH4HcOWA (long version) or https://youtu.be/XsxDH4HcOWA (short version) into a post or page’s main content you’d use:   {% include video id=\"XsxDH4HcOWA\" provider=\"youtube\" %}            To embed it as a video header you’d use the following YAML Front Matter   header:   video:     id: XsxDH4HcOWA     provider: youtube   Vimeo   To embed the following Vimeo video at url https://vimeo.com/212731897 into a post or page’s main content you’d use:   {% include video id=\"212731897\" provider=\"vimeo\" %}            To embed it as a video header you’d use the following YAML Front Matter   header:   video:     id: 212731897     provider: vimeo  ","categories": ["Layout","Uncategorized"],
        "tags": ["video","layout"],
        "url": "http://localhost:4000/layout/uncategorized/layout-header-video/",
        "teaser": null
      },]
